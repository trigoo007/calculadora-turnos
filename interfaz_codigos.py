#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interfaz Streamlit para Sistema de Codificaci√≥n de Ex√°menes
----------------------------------------------------------
Visualizaci√≥n y gesti√≥n interactiva del sistema de c√≥digos de ex√°menes m√©dicos.
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import os
import io
import json
from sistema_codigos_examenes import SistemaCodigos

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de C√≥digos de Ex√°menes",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Crear instancia del sistema de c√≥digos
@st.cache_resource
def cargar_sistema():
    return SistemaCodigos()

sistema = cargar_sistema()

# Funci√≥n para crear gr√°ficos de barras
def crear_grafico_barras(data, x_col, y_col, titulo, color="viridis"):
    try:
        fig, ax = plt.subplots(figsize=(10, 6))
        
        if isinstance(data, list):
            df = pd.DataFrame(data)
        else:
            df = data
            
        if not df.empty:
            sns.barplot(x=x_col, y=y_col, data=df, palette=color, ax=ax)
            plt.title(titulo)
            plt.xticks(rotation=45, ha="right")
            plt.tight_layout()
        else:
            plt.title("No hay datos disponibles")
        
        return fig
    except Exception as e:
        st.error(f"Error al crear gr√°fico: {e}")
        fig, ax = plt.subplots(figsize=(10, 6))
        plt.title(f"Error al crear gr√°fico: {e}")
        return fig

# Barra lateral para navegaci√≥n
st.sidebar.title("Sistema de C√≥digos")
pagina = st.sidebar.radio(
    "Ir a:",
    [
        "Cargar Archivos Excel",
        "B√∫squeda",
        "Registrar Examen Individual",
        "Estad√≠sticas",
        "Importar/Exportar"
    ]
)

# P√°gina para cargar archivos Excel
if pagina == "Cargar Archivos Excel":
    st.title("Carga de Archivos Excel de Ex√°menes")
    
    st.markdown("""
    ### üìä Cargar Archivo Excel de Ex√°menes M√©dicos
    
    Suba su archivo Excel con los datos de ex√°menes para generar c√≥digos y mantener un registro estructurado.
    """)
    
    # Destacar la carga de archivos con caja informativa
    st.info("üëâ **Cargue su archivo Excel (.xlsx, .xls)** con la lista de ex√°menes para procesarlos autom√°ticamente")
    
    # Secci√≥n de carga de archivos con tama√±o destacado
    uploaded_file = st.file_uploader("Seleccionar archivo Excel", type=["xlsx", "xls", "csv"])
    
    if uploaded_file is not None:
        try:
            # Detectar tipo de archivo
            file_extension = uploaded_file.name.split('.')[-1].lower()
            
            # Leer seg√∫n el tipo de archivo
            if file_extension in ['xlsx', 'xls']:
                # Importar el convertidor de Excel
                from convertir_excel import convertir_excel_a_csv, obtener_hojas_excel
                
                # Guardar temporalmente el archivo Excel
                temp_excel_path = os.path.join("data", f"temp_excel_{datetime.now().strftime('%Y%m%d%H%M%S')}.{file_extension}")
                with open(temp_excel_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # Obtener la lista de hojas del archivo Excel
                hojas_info = obtener_hojas_excel(temp_excel_path)
                
                if "error" in hojas_info:
                    st.error(f"Error al leer hojas del Excel: {hojas_info['error']}")
                    if os.path.exists(temp_excel_path):
                        os.remove(temp_excel_path)
                    st.stop()
                
                # Seleccionar la hoja que se quiere usar
                hoja_seleccionada = 0  # Por defecto, la primera hoja
                
                if len(hojas_info["hojas"]) > 1:
                    opciones_hojas = [f"{i}: {nombre}" for i, nombre in enumerate(hojas_info["hojas"])]
                    hoja_combo = st.selectbox(
                        "Seleccionar hoja del archivo Excel:", 
                        opciones_hojas,
                        help="El archivo Excel tiene m√∫ltiples hojas. Seleccione la que contiene los datos de ex√°menes."
                    )
                    # Extraer el √≠ndice de la hoja seleccionada
                    try:
                        hoja_seleccionada = int(hoja_combo.split(':')[0])
                    except ValueError:
                        # Si hay alg√∫n problema con la extracci√≥n, usar la primera hoja
                        hoja_seleccionada = 0
                        st.warning("No se pudo extraer el √≠ndice de la hoja correctamente. Usando la primera hoja.")
                
                # Leer con pandas para vista previa
                df = pd.read_excel(temp_excel_path, sheet_name=hoja_seleccionada)
                st.write(f"Vista previa (Excel - Hoja: {hojas_info['hojas'][hoja_seleccionada]}):")
                st.dataframe(df.head(5), use_container_width=True)
                
                # Preparar nombre para archivo CSV
                temp_csv_path = os.path.join("data", f"temp_csv_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv")
                
                # Guardar informaci√≥n de la hoja seleccionada para usarla despu√©s
                hoja_info = {
                    "indice": hoja_seleccionada,
                    "nombre": hojas_info["hojas"][hoja_seleccionada]
                }
            else:
                # Para archivos CSV, leer directamente
                df = pd.read_csv(uploaded_file)
                st.write("Vista previa (CSV):")
                st.dataframe(df.head(5), use_container_width=True)
                
                # Guardar temporalmente el archivo CSV
                temp_csv_path = os.path.join("data", f"temp_csv_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv")
                with open(temp_csv_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # No necesitamos convertir, ya es CSV
                temp_excel_path = None
                hoja_info = None
            
            # Verificar columnas necesarias
            if "Nombre del procedimiento" not in df.columns:
                columnas_similares = [col for col in df.columns 
                                     if ('nombre' in col.lower() and ('proced' in col.lower() or 'examen' in col.lower())) or
                                        'procedimiento' in col.lower() or 'examen' in col.lower()]
                
                if columnas_similares:
                    st.warning(f"""‚ö†Ô∏è No se encontr√≥ la columna exacta 'Nombre del procedimiento' pero se detectaron columnas similares: 
                                {', '.join(columnas_similares)}. 
                                El sistema intentar√° usar estas columnas autom√°ticamente.""")
                else:
                    st.error("‚ùå El archivo debe contener una columna con nombres de ex√°menes (buscando 'Nombre del procedimiento' o similar)")
                    st.stop()
            
            # Destacar el bot√≥n de procesamiento
            if st.button("üîç PROCESAR ARCHIVO", type="primary", use_container_width=True):
                with st.spinner("Procesando datos..."):
                    # Si es Excel, convertir primero
                    if file_extension in ['xlsx', 'xls']:
                        st.info(f"Convirtiendo archivo Excel a formato procesable (Hoja: {hoja_info['nombre']})...")
                        
                        try:
                            # Primero intentar con el convertidor habitual
                            conversion = convertir_excel_a_csv(
                                temp_excel_path, 
                                temp_csv_path,
                                hoja=hoja_info['indice'],
                                detectar_cabeceras=True
                            )
                            
                            # Si hay error, intentar con el transformador especializado
                            if "error" in conversion:
                                st.warning(f"El conversor est√°ndar encontr√≥ un error: {conversion['error']}")
                                st.info("Intentando con m√©todo alternativo para archivos Excel problem√°ticos...")
                                
                                # Importar el transformador especializado
                                from transformar_excel import transformar_excel_a_csv
                                
                                # Intentar transformaci√≥n especializada
                                resultado_transform = transformar_excel_a_csv(
                                    temp_excel_path,
                                    temp_csv_path,
                                    hoja_info['indice']
                                )
                                
                                if resultado_transform['exito']:
                                    st.success(f"Conversi√≥n exitosa con m√©todo alternativo ({resultado_transform['metodo']}).")
                                    # Actualizar la ruta del CSV si fue cambiada
                                    if resultado_transform['ruta_csv'] != temp_csv_path:
                                        temp_csv_path = resultado_transform['ruta_csv']
                                else:
                                    st.error(f"No se pudo convertir el archivo Excel autom√°ticamente: {resultado_transform.get('error', 'Error desconocido')}")
                                    
                                    # Activar soluci√≥n de emergencia
                                    try:
                                        from solucion_emergencia import extraer_columnas_necesarias, crear_plantilla_csv, generar_instrucciones_usuario
                                        
                                        st.warning("‚ö†Ô∏è Se ha detectado un formato Excel problem√°tico que no podemos procesar directamente.")
                                        
                                        # Generar archivos de ayuda
                                        directorio_downloads = os.path.dirname(temp_excel_path)
                                        base_name = os.path.splitext(os.path.basename(uploaded_file.name))[0]
                                        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
                                        
                                        # Crear rutas
                                        ruta_csv_emergencia = os.path.join(directorio_downloads, f"{base_name}_simplificado_{timestamp}.csv")
                                        ruta_plantilla = os.path.join(directorio_downloads, f"plantilla_examenes_{timestamp}.csv")
                                        ruta_instrucciones = os.path.join(directorio_downloads, f"INSTRUCCIONES_EXCEL_PROBLEMATICO_{timestamp}.txt")
                                        
                                        # Generar archivos
                                        resultado_csv = extraer_columnas_necesarias(temp_excel_path, ruta_csv_emergencia)
                                        resultado_plantilla = crear_plantilla_csv(ruta_plantilla)
                                        resultado_instr = generar_instrucciones_usuario(ruta_instrucciones)
                                        
                                        # Mostrar mensaje e instrucciones
                                        st.info("üõ†Ô∏è Hemos generado archivos de ayuda para procesar su Excel:")
                                        
                                        # Crear expander con instrucciones
                                        with st.expander("‚û°Ô∏è C√≥mo procesar su archivo Excel (haga clic para ver)"):
                                            st.markdown("""
                                            ### Instrucciones para procesar su archivo Excel
                                            
                                            Hemos detectado que su archivo Excel tiene un formato que causa problemas al procesarlo autom√°ticamente.
                                            Por favor, siga estos pasos:
                                            
                                            1. **Opci√≥n 1: Usar la plantilla CSV**
                                               - Descargue la plantilla CSV generada
                                               - √Åbrala en Excel y copie los datos de su archivo original
                                               - Gu√°rdela y c√°rguela en esta interfaz
                                            
                                            2. **Opci√≥n 2: Convertir manualmente el Excel original**
                                               - Abra su archivo Excel en Microsoft Excel o LibreOffice
                                               - Gu√°rdelo como CSV (*.csv) desde el men√∫ "Guardar como..."
                                               - Cargue el nuevo CSV en esta interfaz
                                            
                                            Los datos m√≠nimos necesarios son:
                                            - Nombre del procedimiento (columna "Prestaci√≥n" en su Excel)
                                            - Centro m√©dico (columna "Centro M√©dico" en su Excel)
                                            - Sala de adquisici√≥n (columna "Sala" en su Excel)
                                            """)
                                        
                                        # Proporcionar enlaces para descargar los archivos de ayuda
                                        if resultado_plantilla["exito"]:
                                            # Leer el contenido de la plantilla para permitir la descarga
                                            with open(ruta_plantilla, "r", encoding="utf-8") as f:
                                                contenido_plantilla = f.read()
                                            
                                            # Bot√≥n de descarga para la plantilla
                                            st.download_button(
                                                label="üìù Descargar Plantilla CSV",
                                                data=contenido_plantilla,
                                                file_name=f"plantilla_examenes.csv",
                                                mime="text/csv",
                                                help="Descargue esta plantilla, ll√©nela con los datos de su Excel y c√°rguela aqu√≠"
                                            )
                                        
                                        if resultado_instr["exito"]:
                                            # Leer el contenido de las instrucciones para permitir la descarga
                                            with open(ruta_instrucciones, "r", encoding="utf-8") as f:
                                                contenido_instr = f.read()
                                            
                                            # Bot√≥n de descarga para las instrucciones
                                            st.download_button(
                                                label="üìã Descargar Instrucciones Detalladas",
                                                data=contenido_instr,
                                                file_name=f"INSTRUCCIONES_EXCEL_PROBLEMATICO.txt",
                                                mime="text/plain",
                                                help="Descargue las instrucciones completas para procesar su archivo Excel"
                                            )
                                            
                                    except Exception as e:
                                        st.error(f"Error al generar soluci√≥n de emergencia: {str(e)}")
                                    
                                    # Limpiar archivos temporales y detener proceso
                                    if os.path.exists(temp_excel_path):
                                        os.remove(temp_excel_path)
                                    st.stop()
                        except Exception as e:
                            st.error(f"Error al convertir Excel: {str(e)}")
                            # Limpiar archivos temporales
                            if os.path.exists(temp_excel_path):
                                os.remove(temp_excel_path)
                            st.stop()
                        
                        # Mostrar informaci√≥n adicional
                        if not conversion["info_columnas"]["tiene_columna_nombre"]:
                            st.warning("No se encontr√≥ la columna 'Nombre del procedimiento' exacta.")
                            if conversion["info_columnas"]["columnas_similares"]:
                                columnas_similares = ", ".join(conversion["info_columnas"]["columnas_similares"])
                                st.info(f"Se encontraron columnas similares: {columnas_similares}")
                                st.write("El sistema intentar√° usar estas columnas como alternativa.")
                    
                    # Procesar el CSV con detecci√≥n autom√°tica de columnas
                    resultado = sistema.procesar_csv(temp_csv_path)
                
                if "error" in resultado:
                    st.error(f"Error: {resultado['error']}")
                else:
                    st.success(f"‚úÖ Procesamiento completado con √©xito")
                    
                    # Mostrar resultados
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Nuevos ex√°menes", resultado["nuevos"])
                    with col2:
                        st.metric("Actualizados", resultado["actualizados"])
                    with col3:
                        st.metric("Errores", resultado["errores"])
                    
                    # Mostrar informaci√≥n de columnas usadas si est√° disponible
                    if "columnas_usadas" in resultado:
                        with st.expander("Detalles de columnas utilizadas"):
                            st.markdown("#### Mapeo de columnas")
                            
                            columnas_info = pd.DataFrame({
                                "Campo del sistema": ["Nombre del procedimiento", "Centro m√©dico", "Sala de adquisici√≥n", "Descripci√≥n"],
                                "Columna utilizada": [
                                    resultado["columnas_usadas"]["nombre"] or "No disponible",
                                    resultado["columnas_usadas"]["centro"] or "No disponible",
                                    resultado["columnas_usadas"]["sala"] or "No disponible",
                                    resultado["columnas_usadas"]["descripcion"] or "No disponible"
                                ]
                            })
                            
                            st.dataframe(columnas_info)
                
                # Limpiar archivos temporales
                if temp_excel_path and os.path.exists(temp_excel_path):
                    os.remove(temp_excel_path)
                if os.path.exists(temp_csv_path):
                    os.remove(temp_csv_path)
        except Exception as e:
            st.error(f"Error al procesar el archivo: {e}")
            # Asegurarse de limpiar cualquier archivo temporal en caso de error
            try:
                if 'temp_excel_path' in locals() and temp_excel_path and os.path.exists(temp_excel_path):
                    os.remove(temp_excel_path)
                if 'temp_csv_path' in locals() and temp_csv_path and os.path.exists(temp_csv_path):
                    os.remove(temp_csv_path)
            except:
                pass
    
    # Mostrar estad√≠sticas b√°sicas en tarjetas despu√©s de la carga
    try:
        stats = sistema.obtener_estadisticas()
        
        st.subheader("Estad√≠sticas del Sistema")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Total de Ex√°menes", f"{stats['total_examenes']:,}")
        
        with col2:
            st.metric("Usos Registrados", f"{stats['total_usos']:,}")
        
        with col3:
            st.metric("Centros", f"{stats['total_centros']:,}")
        
        # Mostrar distribuci√≥n por tipo si hay datos
        if stats['total_examenes'] > 0 and len(stats['por_tipo']) > 0:
            # Crear DataFrame para gr√°fico
            tipo_df = pd.DataFrame([
                {"tipo": tipo, "cantidad": cantidad} 
                for tipo, cantidad in stats['por_tipo'].items()
            ])
            
            fig = crear_grafico_barras(tipo_df, "tipo", "cantidad", "Ex√°menes por Tipo")
            st.pyplot(fig)
    
    except Exception as e:
        pass  # Silenciar errores de estad√≠sticas para no distraer del flujo principal

# P√°gina para registrar ex√°menes individuales
elif pagina == "Registrar Examen Individual":
    st.title("Registrar Examen Individual")
    
    st.subheader("Registrar Nuevo Examen")
    
    with st.form("form_nuevo_examen"):
        nombre = st.text_input("Nombre del examen o procedimiento*", 
                              placeholder="TAC de t√≥rax")
        
        # Selector de tipo con detecci√≥n autom√°tica
        tipos = ["Detectar autom√°ticamente", "TAC", "RX", "RM", "US", "PET", "OTRO"]
        tipo_seleccionado = st.selectbox("Tipo de examen", tipos)
        
        col1, col2 = st.columns(2)
        
        with col1:
            centro = st.text_input("Centro m√©dico", placeholder="Hospital Central")
        
        with col2:
            sala = st.text_input("Sala", placeholder="SCA TAC 01")
        
        descripcion = st.text_area("Descripci√≥n (opcional)", 
                                 placeholder="Detalles adicionales del examen...")
        
        submitted = st.form_submit_button("Registrar Examen")
        
        if submitted:
            if nombre:
                tipo_final = None
                if tipo_seleccionado != "Detectar autom√°ticamente":
                    tipo_final = tipo_seleccionado
                    
                resultado = sistema.registrar_examen(
                    nombre=nombre,
                    centro=centro if centro else None,
                    sala=sala if sala else None,
                    descripcion=descripcion if descripcion else None
                )
                
                if "error" in resultado:
                    st.error(f"Error al registrar examen: {resultado['error']}")
                else:
                    if resultado["nuevo"]:
                        st.success(f"Examen registrado con c√≥digo: {resultado['codigo']}")
                    else:
                        st.info(f"El examen ya exist√≠a. Se actualiz√≥ su contador. C√≥digo: {resultado['codigo']}")
                    
                    # Mostrar detalles del examen registrado
                    examen = sistema.obtener_examen_por_codigo(resultado['codigo'])
                    if examen:
                        st.write(f"**Tipo detectado:** {examen['tipo']}")
                        st.write(f"**Usos totales:** {examen['conteo']}")
            else:
                st.warning("El nombre del examen es obligatorio")

# P√°gina de b√∫squeda
elif pagina == "B√∫squeda":
    st.title("B√∫squeda de Ex√°menes")
    
    # Opciones de b√∫squeda
    col1, col2, col3 = st.columns(3)
    
    with col1:
        busqueda_texto = st.text_input("Texto a buscar", 
                                     placeholder="Nombre o c√≥digo",
                                     help="Busca en nombres y c√≥digos")
    
    with col2:
        # Opciones de tipo
        tipos = ["Todos", "TAC", "RX", "RM", "US", "PET", "OTRO"]
        tipo_busqueda = st.selectbox("Tipo de examen", tipos)
        tipo_filtro = None if tipo_busqueda == "Todos" else tipo_busqueda
    
    with col3:
        # Obtener lista de centros
        try:
            centros = ["Todos"] + sistema.obtener_centros()
            centro_busqueda = st.selectbox("Centro m√©dico", centros)
            centro_filtro = None if centro_busqueda == "Todos" else centro_busqueda
        except:
            centro_busqueda = "Todos"
            centro_filtro = None
            st.error("Error al cargar centros m√©dicos")
    
    # Filtro adicional por sala
    if centro_filtro:
        try:
            # Obtener salas del centro seleccionado
            salas = ["Todas"] + sistema.obtener_salas(centro_filtro)
            sala_busqueda = st.selectbox("Sala", salas)
            sala_filtro = None if sala_busqueda == "Todas" else sala_busqueda
        except:
            sala_busqueda = "Todas"
            sala_filtro = None
    else:
        try:
            # Obtener todas las salas
            salas = ["Todas"] + sistema.obtener_salas()
            sala_busqueda = st.selectbox("Sala", salas)
            sala_filtro = None if sala_busqueda == "Todas" else sala_busqueda
        except:
            sala_busqueda = "Todas"
            sala_filtro = None
    
    # Bot√≥n de b√∫squeda
    if st.button("Buscar"):
        try:
            examenes = sistema.buscar_examenes(
                texto=busqueda_texto if busqueda_texto else None,
                tipo=tipo_filtro,
                centro=centro_filtro,
                sala=sala_filtro
            )
            
            if examenes:
                st.success(f"Se encontraron {len(examenes)} ex√°menes")
                
                # Convertir a DataFrame para mostrar
                df = pd.DataFrame(examenes)
                df = df[['codigo', 'nombre', 'tipo', 'centro', 'sala', 'conteo']]
                df.columns = ['C√≥digo', 'Nombre', 'Tipo', 'Centro', 'Sala', 'Usos']
                
                # Reemplazar valores nulos
                df = df.fillna("N/A")
                
                st.dataframe(df, use_container_width=True)
                
                # Opci√≥n para ver detalles
                with st.expander("Ver detalles de un examen"):
                    codigo_detalle = st.selectbox(
                        "Seleccione un c√≥digo para ver detalles",
                        [""] + list(df['C√≥digo'])
                    )
                    
                    if codigo_detalle:
                        examen = sistema.obtener_examen_por_codigo(codigo_detalle)
                        if examen:
                            st.subheader(f"Detalles de {examen['nombre']}")
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.write(f"**C√≥digo:** {examen['codigo']}")
                                st.write(f"**Tipo:** {examen['tipo']}")
                                st.write(f"**Usos totales:** {examen['conteo']}")
                                st.write(f"**Fecha de creaci√≥n:** {examen['fecha_creacion']}")
                            
                            with col2:
                                if examen['centro']:
                                    st.write(f"**Centro:** {examen['centro']}")
                                if examen['sala']:
                                    st.write(f"**Sala:** {examen['sala']}")
                                if examen['descripcion']:
                                    st.write(f"**Descripci√≥n:** {examen['descripcion']}")
                            
                            if examen['historial']:
                                st.subheader("Historial de usos recientes")
                                
                                # Crear DataFrame de historial
                                hist_df = pd.DataFrame(examen['historial'])
                                hist_df.columns = ['Centro', 'Sala', 'Fecha']
                                hist_df = hist_df.fillna("N/A")
                                
                                st.dataframe(hist_df, use_container_width=True)
            else:
                st.warning("No se encontraron ex√°menes con los criterios especificados")
        
        except Exception as e:
            st.error(f"Error en la b√∫squeda: {e}")
    
    # B√∫squeda directa por c√≥digo
    st.subheader("B√∫squeda por c√≥digo")
    
    codigo_busqueda = st.text_input("Ingrese un c√≥digo de examen", placeholder="T123ABC")
    
    if codigo_busqueda:
        if st.button("Buscar por c√≥digo"):
            examen = sistema.obtener_examen_por_codigo(codigo_busqueda)
            
            if examen:
                st.subheader(f"Detalles de {examen['nombre']}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**C√≥digo:** {examen['codigo']}")
                    st.write(f"**Tipo:** {examen['tipo']}")
                    st.write(f"**Usos totales:** {examen['conteo']}")
                    st.write(f"**Fecha de creaci√≥n:** {examen['fecha_creacion']}")
                
                with col2:
                    if examen['centro']:
                        st.write(f"**Centro:** {examen['centro']}")
                    if examen['sala']:
                        st.write(f"**Sala:** {examen['sala']}")
                    if examen['descripcion']:
                        st.write(f"**Descripci√≥n:** {examen['descripcion']}")
                
                if examen['historial']:
                    st.subheader("Historial de usos recientes")
                    
                    # Crear DataFrame de historial
                    hist_df = pd.DataFrame(examen['historial'])
                    hist_df.columns = ['Centro', 'Sala', 'Fecha']
                    hist_df = hist_df.fillna("N/A")
                    
                    st.dataframe(hist_df, use_container_width=True)
            else:
                st.warning(f"No se encontr√≥ ning√∫n examen con el c√≥digo {codigo_busqueda}")

# P√°gina de estad√≠sticas
elif pagina == "Estad√≠sticas":
    st.title("Estad√≠sticas del Sistema")
    
    try:
        stats = sistema.obtener_estadisticas()
        
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Ex√°menes", f"{stats['total_examenes']:,}")
        
        with col2:
            st.metric("Usos Registrados", f"{stats['total_usos']:,}")
        
        with col3:
            st.metric("Centros M√©dicos", f"{stats['total_centros']:,}")
        
        with col4:
            st.metric("Salas", f"{stats['total_salas']:,}")
        
        # Distribuci√≥n por tipo
        if stats['total_examenes'] > 0:
            st.subheader("Distribuci√≥n por Tipo de Examen")
            
            # Crear DataFrame para gr√°fico
            tipo_df = pd.DataFrame([
                {"tipo": tipo, "cantidad": cantidad} 
                for tipo, cantidad in stats['por_tipo'].items()
            ])
            
            fig = crear_grafico_barras(tipo_df, "tipo", "cantidad", "Ex√°menes por Tipo", "viridis")
            st.pyplot(fig)
            
            # Tabla de distribuci√≥n
            st.dataframe(tipo_df, use_container_width=True)
            
            # Ex√°menes m√°s usados
            if stats['mas_usados']:
                st.subheader("Ex√°menes m√°s utilizados")
                
                # Crear DataFrame para gr√°fico
                most_used_df = pd.DataFrame(stats['mas_usados'])
                most_used_df = most_used_df.sort_values('conteo', ascending=False)
                
                # Truncar nombres largos para el gr√°fico
                most_used_df['nombre_corto'] = most_used_df['nombre'].apply(
                    lambda x: x[:25] + '...' if len(str(x)) > 25 else x
                )
                
                fig = crear_grafico_barras(most_used_df, "nombre_corto", "conteo", 
                                         "Ex√°menes m√°s utilizados", "plasma")
                st.pyplot(fig)
                
                # Tabla detallada
                detailed_df = pd.DataFrame(stats['mas_usados'])
                detailed_df = detailed_df[['codigo', 'nombre', 'tipo', 'conteo']]
                detailed_df.columns = ['C√≥digo', 'Nombre', 'Tipo', 'Usos']
                
                st.dataframe(detailed_df, use_container_width=True)
            
            # An√°lisis por centro y sala
            if stats['total_centros'] > 0:
                st.subheader("Ex√°menes por Centro y Sala")
                
                # Obtener datos agrupados por centro y tipo
                by_center_df = pd.DataFrame(
                    sistema.buscar_examenes(limite=1000)
                )
                
                if not by_center_df.empty and 'centro' in by_center_df.columns:
                    # Filtrar registros sin centro
                    by_center_df = by_center_df[by_center_df['centro'].notna()]
                    
                    if not by_center_df.empty:
                        # Agrupar por centro y tipo
                        center_type_counts = by_center_df.groupby(['centro', 'tipo']).size().reset_index(name='count')
                        
                        # Pivot para mejor visualizaci√≥n
                        pivot_df = center_type_counts.pivot(index='centro', columns='tipo', values='count').fillna(0)
                        
                        # Ordenar por total
                        pivot_df['Total'] = pivot_df.sum(axis=1)
                        pivot_df = pivot_df.sort_values('Total', ascending=False)
                        
                        st.dataframe(pivot_df, use_container_width=True)
                        
                        # Gr√°fico
                        fig, ax = plt.subplots(figsize=(10, 6))
                        pivot_df.drop('Total', axis=1).plot(kind='bar', stacked=True, ax=ax)
                        plt.title("Distribuci√≥n de ex√°menes por centro")
                        plt.ylabel("Cantidad de ex√°menes")
                        plt.xticks(rotation=45, ha="right")
                        plt.tight_layout()
                        st.pyplot(fig)
        else:
            st.info("No hay datos suficientes para mostrar estad√≠sticas")
    
    except Exception as e:
        st.error(f"Error al generar estad√≠sticas: {e}")

# P√°gina de importaci√≥n/exportaci√≥n
elif pagina == "Importar/Exportar":
    st.title("Importar / Exportar Datos")
    
    tab1, tab2 = st.tabs(["Exportar", "Importar"])
    
    with tab1:
        st.subheader("Exportar datos")
        
        st.write("Exporte todos los datos del sistema a un archivo JSON")
        
        if st.button("Generar archivo de exportaci√≥n"):
            try:
                with st.spinner("Generando archivo..."):
                    resultado = sistema.exportar_json()
                
                if resultado["exito"]:
                    st.success(f"Exportaci√≥n completada. Se exportaron {resultado['total']} ex√°menes.")
                    
                    # Leer el archivo para descarga
                    with open(resultado["archivo"], "r", encoding="utf-8") as f:
                        contenido = f.read()
                    
                    # Bot√≥n de descarga
                    st.download_button(
                        label="Descargar archivo JSON",
                        data=contenido,
                        file_name=os.path.basename(resultado["archivo"]),
                        mime="application/json"
                    )
                else:
                    st.error(f"Error al exportar: {resultado['error']}")
            except Exception as e:
                st.error(f"Error al exportar datos: {e}")
    
    with tab2:
        st.subheader("Importar datos")
        
        st.write("Importe datos desde un archivo JSON exportado previamente")
        
        uploaded_file = st.file_uploader("Seleccionar archivo JSON", type=["json"])
        
        if uploaded_file is not None:
            try:
                # Validar que sea un JSON v√°lido
                try:
                    data = json.loads(uploaded_file.getvalue().decode('utf-8'))
                except:
                    st.error("El archivo no contiene JSON v√°lido")
                    st.stop()
                
                # Guardar temporalmente
                temp_path = os.path.join("data", f"temp_import_{datetime.now().strftime('%Y%m%d%H%M%S')}.json")
                
                with open(temp_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                if st.button("Importar datos"):
                    with st.spinner("Importando datos..."):
                        resultado = sistema.importar_json(temp_path)
                    
                    if "error" in resultado:
                        st.error(f"Error: {resultado['error']}")
                    else:
                        st.success("Importaci√≥n completada con √©xito")
                        
                        # Mostrar resultados
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Nuevos ex√°menes", resultado["nuevos"])
                        with col2:
                            st.metric("Actualizados", resultado["actualizados"])
                        with col3:
                            st.metric("Errores", resultado["errores"])
                        
                        # Eliminar archivo temporal
                        if os.path.exists(temp_path):
                            os.remove(temp_path)
            except Exception as e:
                st.error(f"Error al procesar el archivo: {e}")

# Cierre de conexi√≥n
try:
    sistema.cerrar_db()
except:
    pass