#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interfaz Streamlit para Sistema de Codificaci칩n de Ex치menes
----------------------------------------------------------
Visualizaci칩n y gesti칩n interactiva del sistema de c칩digos de ex치menes m칠dicos.
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import os
import io
import json
from codigo_examenes import CodigosExamenes

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="Sistema de C칩digos de Ex치menes",
    page_icon="游낀",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Crear instancia del sistema de c칩digos
@st.cache_resource
def cargar_sistema():
    return CodigosExamenes()

sistema = cargar_sistema()

# Funci칩n para crear gr치ficos
def crear_grafico_barras(datos, x, y, titulo, color='viridis'):
    fig, ax = plt.subplots(figsize=(10, 6))
    
    if isinstance(datos, list):
        # Convertir lista de diccionarios a DataFrame
        df = pd.DataFrame(datos)
    else:
        df = datos
    
    if len(df) > 0:
        try:
            bar_plot = sns.barplot(x=x, y=y, data=df, palette=color, ax=ax)
            plt.title(titulo)
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            
            # A침adir valores en las barras
            for p in bar_plot.patches:
                bar_plot.annotate(format(p.get_height(), '.0f'),
                                  (p.get_x() + p.get_width() / 2., p.get_height()),
                                  ha = 'center', va = 'center',
                                  xytext = (0, 9),
                                  textcoords = 'offset points')
        except Exception as e:
            plt.text(0.5, 0.5, f"Error al crear gr치fico: {str(e)}", 
                     horizontalalignment='center', verticalalignment='center',
                     transform=ax.transAxes, fontsize=12)
    else:
        plt.text(0.5, 0.5, "No hay datos disponibles", 
                 horizontalalignment='center', verticalalignment='center',
                 transform=ax.transAxes, fontsize=14)
    
    return fig

# Barra lateral para navegaci칩n
st.sidebar.title("Navegaci칩n")
pagina = st.sidebar.radio(
    "Ir a:",
    [
        "Inicio", 
        "B칰squeda de C칩digos", 
        "Estad칤sticas", 
        "Cargar Datos",
        "Gesti칩n de Centros y Salas"
    ]
)

# P치gina de inicio
if pagina == "Inicio":
    st.title("Sistema de Codificaci칩n de Ex치menes M칠dicos")
    
    st.markdown("""
    ### Bienvenido al sistema de gesti칩n y an치lisis de c칩digos de ex치menes
    
    Esta aplicaci칩n permite:
    - Buscar y visualizar c칩digos de ex치menes m칠dicos
    - Generar estad칤sticas por tipos de ex치menes, centros m칠dicos y salas
    - Cargar datos desde archivos CSV
    - Gestionar centros m칠dicos y salas de adquisici칩n
    
    Utilice la barra lateral para navegar entre las diferentes secciones.
    """)
    
    # Mostrar algunos datos generales
    try:
        stats = sistema.estadisticas_codigos()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de c칩digos", f"{stats.get('total_codigos', 0):,}")
        
        with col2:
            # Contar centros m칠dicos
            conn = conectar_db()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM centros_medicos")
            total_centros = cursor.fetchone()[0]
            conn.close()
            st.metric("Centros m칠dicos", f"{total_centros:,}")
        
        with col3:
            # Contar usos registrados
            conn = conectar_db()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM historico_examenes")
            total_usos = cursor.fetchone()[0]
            conn.close()
            st.metric("Usos registrados", f"{total_usos:,}")
        
        # Mostrar distribuci칩n por tipo si hay datos
        if stats.get('total_codigos', 0) > 0 and 'por_tipo' in stats:
            st.subheader("Distribuci칩n por tipo de examen")
            
            # Crear DataFrame para el gr치fico
            tipos_df = pd.DataFrame({
                'Tipo': list(stats['por_tipo'].keys()),
                'Cantidad': list(stats['por_tipo'].values())
            })
            
            if not tipos_df.empty:
                fig = crear_grafico_barras(tipos_df, 'Tipo', 'Cantidad', 
                                        'Cantidad de ex치menes por tipo')
                st.pyplot(fig)
        
        # Mostrar ex치menes m치s comunes si hay datos
        if 'examenes_comunes' in stats and stats['examenes_comunes']:
            st.subheader("Ex치menes m치s frecuentes")
            
            examenes_df = pd.DataFrame(stats['examenes_comunes'])
            examenes_df = examenes_df.sort_values('conteo', ascending=False).head(10)
            
            # Truncar nombres largos
            examenes_df['nombre_corto'] = examenes_df['nombre'].apply(
                lambda x: x[:30] + '...' if len(x) > 30 else x)
            
            if not examenes_df.empty:
                fig = crear_grafico_barras(examenes_df, 'nombre_corto', 'conteo', 
                                        'Ex치menes m치s frecuentes')
                st.pyplot(fig)
    except Exception as e:
        st.error(f"Error al cargar estad칤sticas: {e}")
        
# P치gina de b칰squeda de c칩digos
elif pagina == "B칰squeda de C칩digos":
    st.title("B칰squeda de C칩digos de Ex치menes")
    
    # Tabs para diferentes tipos de b칰squeda
    tab1, tab2, tab3 = st.tabs(["Por Texto/Tipo", "Por Centro/Sala", "Por C칩digo"])
    
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            texto_busqueda = st.text_input("Texto a buscar", placeholder="TAC abdomen")
        
        with col2:
            tipos = ["Todos", "TAC", "RX", "RM", "US", "PET", "PROC", "OTRO"]
            tipo_seleccionado = st.selectbox("Tipo de examen", tipos)
            
            if tipo_seleccionado == "Todos":
                tipo_seleccionado = None
        
        if st.button("Buscar", key="buscar_texto"):
            if texto_busqueda or tipo_seleccionado:
                examenes = sistema.buscar_examenes(texto_busqueda, tipo=tipo_seleccionado)
                
                if examenes:
                    st.success(f"Se encontraron {len(examenes)} resultados")
                    # Crear DataFrame para mostrar
                    df = pd.DataFrame(examenes)
                    # Reordenar columnas y formatear
                    if 'conteo' in df.columns:
                        df = df[['codigo', 'nombre', 'tipo', 'subtipo', 'complejidad', 'conteo']]
                        df.columns = ['C칩digo', 'Nombre', 'Tipo', 'Subtipo', 'Complejidad', 'Usos']
                    else:
                        df = df[['codigo', 'nombre', 'tipo', 'subtipo', 'complejidad']]
                        df.columns = ['C칩digo', 'Nombre', 'Tipo', 'Subtipo', 'Complejidad']
                    
                    st.dataframe(df, use_container_width=True)
                else:
                    st.warning("No se encontraron resultados")
            else:
                st.warning("Ingrese un texto para buscar o seleccione un tipo")
    
    with tab2:
        col1, col2 = st.columns(2)
        
        with col1:
            # Obtener lista de centros
            conn = conectar_db()
            cursor = conn.cursor()
            cursor.execute("SELECT nombre FROM centros_medicos ORDER BY nombre")
            centros = [c[0] for c in cursor.fetchall()]
            centros.insert(0, "Todos")
            
            centro_seleccionado = st.selectbox("Centro m칠dico", centros)
            if centro_seleccionado == "Todos":
                centro_seleccionado = None
        
        with col2:
            # Obtener salas (filtradas por centro si se seleccion칩 uno)
            salas = ["Todas"]
            conn = conectar_db()
            cursor = conn.cursor()
            
            if centro_seleccionado:
                cursor.execute(
                    """SELECT s.nombre FROM salas_adquisicion s 
                       JOIN centros_medicos c ON s.centro_id = c.id 
                       WHERE c.nombre = ? ORDER BY s.nombre""", 
                    (centro_seleccionado,)
                )
                salas.extend([s[0] for s in cursor.fetchall()])
            else:
                cursor.execute("SELECT nombre FROM salas_adquisicion ORDER BY nombre")
                salas.extend([s[0] for s in cursor.fetchall()])
            
            conn.close()
            
            sala_seleccionada = st.selectbox("Sala de adquisici칩n", salas)
            if sala_seleccionada == "Todas":
                sala_seleccionada = None
        
        # Fechas
        col1, col2 = st.columns(2)
        with col1:
            fecha_inicio = st.date_input("Desde fecha", 
                                        value=datetime.now() - timedelta(days=30))
        with col2:
            fecha_fin = st.date_input("Hasta fecha", 
                                    value=datetime.now())
        
        if st.button("Buscar", key="buscar_centro"):
            # Convertir fechas a formato string
            fecha_inicio_str = fecha_inicio.strftime('%Y-%m-%d')
            fecha_fin_str = fecha_fin.strftime('%Y-%m-%d')
            
            examenes = sistema.buscar_examenes_por_centro(
                centro_medico=centro_seleccionado, 
                sala=sala_seleccionada,
                fecha_inicio=fecha_inicio_str,
                fecha_fin=fecha_fin_str
            )
            
            if examenes:
                st.success(f"Se encontraron {len(examenes)} resultados")
                # Crear DataFrame para mostrar
                df = pd.DataFrame(examenes)
                # Reordenar columnas y formatear
                df = df[['codigo', 'nombre', 'tipo', 'centro', 'sala', 'fecha', 'tiempo_real']]
                df.columns = ['C칩digo', 'Nombre', 'Tipo', 'Centro', 'Sala', 'Fecha', 'Duraci칩n (min)']
                
                # Reemplazar valores None con "N/A"
                df = df.fillna("N/A")
                
                st.dataframe(df, use_container_width=True)
            else:
                st.warning("No se encontraron resultados")
    
    with tab3:
        codigo = st.text_input("Ingrese el c칩digo del examen", placeholder="TACC123")
        
        if st.button("Buscar c칩digo"):
            if codigo:
                examen = sistema.obtener_examen_por_codigo(codigo)
                
                if examen:
                    # Mostrar informaci칩n del examen
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("Informaci칩n del Examen")
                        st.markdown(f"**C칩digo:** {examen['codigo']}")
                        st.markdown(f"**Nombre:** {examen['nombre']}")
                        st.markdown(f"**Tipo:** {examen['tipo']}")
                        st.markdown(f"**Subtipo:** {examen['subtipo']}")
                        st.markdown(f"**Complejidad:** {examen['complejidad']}/5")
                        st.markdown(f"**Tiempo estimado:** {examen['tiempo_estimado']} minutos")
                        st.markdown(f"**Usos registrados:** {examen['conteo']}")
                        st.markdown(f"**Fecha de creaci칩n:** {examen['fecha_creacion']}")
                    
                    with col2:
                        if 'historial' in examen and examen['historial']:
                            st.subheader("Historial de Uso")
                            historial_df = pd.DataFrame(examen['historial'])
                            historial_df.columns = ['Fecha', 'Centro', 'Sala', 'Duraci칩n (min)']
                            historial_df = historial_df.fillna("N/A")
                            st.dataframe(historial_df, use_container_width=True)
                        else:
                            st.info("No hay historial de uso disponible")
                else:
                    st.warning(f"No se encontr칩 ning칰n examen con el c칩digo {codigo}")
            else:
                st.warning("Ingrese un c칩digo para buscar")

# P치gina de estad칤sticas
elif pagina == "Estad칤sticas":
    st.title("Estad칤sticas del Sistema")
    
    tab1, tab2 = st.tabs(["Estad칤sticas Generales", "Por Centro M칠dico"])
    
    with tab1:
        try:
            stats = sistema.estadisticas_codigos()
            
            if stats.get('total_codigos', 0) > 0:
                # Mostrar totales
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total de c칩digos", f"{stats['total_codigos']:,}")
                with col2:
                    # Calcular total de procedimientos
                    total_proc = sum(stats['por_tipo'].values())
                    st.metric("Total de procedimientos", f"{total_proc:,}")
                with col3:
                    # Total de ex치menes en hist칩rico
                    st.metric("Usos registrados", f"{stats.get('total_historico', 0):,}")
                
                # Distribuci칩n por tipo
                st.subheader("Distribuci칩n por tipo de examen")
                tipos_df = pd.DataFrame({
                    'Tipo': list(stats['por_tipo'].keys()),
                    'Cantidad': list(stats['por_tipo'].values())
                })
                
                fig = crear_grafico_barras(tipos_df, 'Tipo', 'Cantidad', 
                                        'Cantidad de ex치menes por tipo')
                st.pyplot(fig)
                
                # Si hay datos de tiempo, mostrar estad칤sticas
                if 'tiempo' in stats and stats['tiempo']['promedio']:
                    st.subheader("Estad칤sticas de tiempo")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Tiempo promedio", f"{stats['tiempo']['promedio']:.1f} min")
                    with col2:
                        st.metric("Tiempo m칤nimo", f"{stats['tiempo']['minimo']} min")
                    with col3:
                        st.metric("Tiempo m치ximo", f"{stats['tiempo']['maximo']} min")
                
                # Ex치menes m치s comunes
                if 'examenes_comunes' in stats and stats['examenes_comunes']:
                    st.subheader("Ex치menes m치s frecuentes")
                    examenes_df = pd.DataFrame(stats['examenes_comunes'])
                    examenes_df = examenes_df.sort_values('conteo', ascending=False)
                    
                    # Truncar nombres largos
                    examenes_df['nombre_corto'] = examenes_df['nombre'].apply(
                        lambda x: x[:30] + '...' if len(x) > 30 else x)
                    
                    fig = crear_grafico_barras(examenes_df, 'nombre_corto', 'conteo', 
                                            'Ex치menes m치s frecuentes')
                    st.pyplot(fig)
                    
                    # Mostrar tabla detallada
                    st.dataframe(
                        examenes_df[['codigo', 'nombre', 'tipo', 'conteo']].rename(
                            columns={'codigo': 'C칩digo', 'nombre': 'Nombre', 
                                    'tipo': 'Tipo', 'conteo': 'Usos'}
                        ),
                        use_container_width=True
                    )
            else:
                st.info("No hay datos suficientes para mostrar estad칤sticas.")
                st.info("Cargue algunos datos desde la secci칩n 'Cargar Datos'.")
        except Exception as e:
            st.error(f"Error al cargar estad칤sticas generales: {e}")
    
    with tab2:
        try:
            # Obtener lista de centros
            conn = conectar_db()
            cursor = conn.cursor()
            cursor.execute("SELECT nombre FROM centros_medicos ORDER BY nombre")
            centros = [c[0] for c in cursor.fetchall()]
            conn.close()
            
            if centros:
                centro_seleccionado = st.selectbox(
                    "Seleccione un centro m칠dico", 
                    ["Todos"] + centros
                )
                
                if st.button("Generar estad칤sticas"):
                    if centro_seleccionado == "Todos":
                        # Estad칤sticas de todos los centros
                        stats = sistema.obtener_estadisticas_centro()
                        
                        if 'total_global' in stats:
                            st.metric("Total de ex치menes en todos los centros", 
                                    f"{stats['total_global']:,}")
                            
                            if 'centros' in stats and stats['centros']:
                                st.subheader("Ex치menes por centro m칠dico")
                                
                                centros_df = pd.DataFrame(stats['centros'])
                                centros_df = centros_df.sort_values('total_examenes', ascending=False)
                                centros_df.columns = ['ID', 'Centro', 'Total Ex치menes']
                                
                                # Crear gr치fico
                                fig = crear_grafico_barras(
                                    centros_df, 'Centro', 'Total Ex치menes',
                                    'Ex치menes por centro m칠dico'
                                )
                                st.pyplot(fig)
                                
                                # Mostrar tabla
                                st.dataframe(
                                    centros_df[['Centro', 'Total Ex치menes']],
                                    use_container_width=True
                                )
                            else:
                                st.info("No hay datos de centros m칠dicos para mostrar.")
                        else:
                            st.info("No hay datos de ex치menes registrados.")
                    else:
                        # Estad칤sticas de un centro espec칤fico
                        stats = sistema.obtener_estadisticas_centro(centro_seleccionado)
                        
                        if 'error' in stats:
                            st.error(stats['error'])
                        elif 'centro' in stats:
                            centro = stats['centro']
                            
                            # M칠tricas principales
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("Total ex치menes", f"{centro['total_examenes']:,}")
                            with col2:
                                st.metric("Ex치menes TAC", f"{centro['total_tac']:,}")
                            with col3:
                                st.metric("Ex치menes RX", f"{centro['total_rx']:,}")
                            
                            # Ex치menes por sala
                            if 'salas' in stats and stats['salas']:
                                st.subheader("Ex치menes por sala")
                                
                                salas_df = pd.DataFrame(stats['salas'])
                                salas_df = salas_df.sort_values('total', ascending=False)
                                
                                # Crear gr치fico
                                fig = crear_grafico_barras(
                                    salas_df, 'nombre', 'total',
                                    f'Ex치menes por sala en {centro_seleccionado}'
                                )
                                st.pyplot(fig)
                                
                                # Mostrar desglose por tipo en tabla
                                salas_df.columns = ['Sala', 'Total', 'TAC', 'RX']
                                st.dataframe(salas_df, use_container_width=True)
                            
                            # Ex치menes m치s comunes
                            if 'examenes_comunes' in stats and stats['examenes_comunes']:
                                st.subheader("Ex치menes m치s frecuentes en este centro")
                                
                                examenes_df = pd.DataFrame(stats['examenes_comunes'])
                                examenes_df = examenes_df.sort_values('total', ascending=False)
                                
                                # Truncar nombres largos
                                examenes_df['nombre_corto'] = examenes_df['nombre'].apply(
                                    lambda x: x[:30] + '...' if len(x) > 30 else x)
                                
                                # Crear gr치fico
                                fig = crear_grafico_barras(
                                    examenes_df, 'nombre_corto', 'total',
                                    f'Ex치menes m치s frecuentes en {centro_seleccionado}'
                                )
                                st.pyplot(fig)
                                
                                # Mostrar tabla detallada
                                examenes_df.columns = ['Nombre', 'C칩digo', 'Tipo', 'Total', 'Nombre Corto']
                                st.dataframe(
                                    examenes_df[['C칩digo', 'Nombre', 'Tipo', 'Total']],
                                    use_container_width=True
                                )
                        else:
                            st.warning("No se encontraron datos para este centro m칠dico.")
            else:
                st.info("No hay centros m칠dicos registrados en el sistema.")
                st.info("Agregue centros desde la secci칩n 'Gesti칩n de Centros y Salas'.")
        except Exception as e:
            st.error(f"Error al cargar estad칤sticas por centro: {e}")

# P치gina para cargar datos
elif pagina == "Cargar Datos":
    st.title("Cargar Datos al Sistema")
    
    st.markdown("""
    En esta secci칩n puede cargar archivos CSV para registrar nuevos ex치menes, centros y salas en el sistema.
    
    Los archivos CSV deben contener al menos la columna 'Nombre del procedimiento'.
    Para registrar centros y salas, incluya tambi칠n las columnas 'Centro m칠dico' y 'Sala de adquisici칩n'.
    """)
    
    # Opci칩n para cargar archivo
    archivo_csv = st.file_uploader("Seleccione un archivo CSV", type=['csv'])
    
    if archivo_csv is not None:
        try:
            # Leer el archivo CSV
            df = pd.read_csv(archivo_csv)
            
            # Mostrar primeras filas para verificaci칩n
            st.subheader("Vista previa")
            st.dataframe(df.head(5), use_container_width=True)
            
            # Verificar columnas necesarias
            if 'Nombre del procedimiento' not in df.columns:
                st.error("El archivo debe contener la columna 'Nombre del procedimiento'")
            else:
                # Opciones adicionales
                with st.expander("Opciones avanzadas"):
                    st.write("Mapeo de columnas")
                    col_centro = st.selectbox(
                        "Columna para Centro m칠dico", 
                        ['Centro m칠dico'] + list(df.columns),
                        index=0 if 'Centro m칠dico' in df.columns else -1
                    )
                    
                    col_sala = st.selectbox(
                        "Columna para Sala de adquisici칩n", 
                        ['Sala de adquisici칩n'] + list(df.columns),
                        index=0 if 'Sala de adquisici칩n' in df.columns else -1
                    )
                    
                    col_fecha = st.selectbox(
                        "Columna para Fecha", 
                        ['Fecha del procedimiento'] + list(df.columns),
                        index=0 if 'Fecha del procedimiento' in df.columns else -1
                    )
                    
                    col_duracion = st.selectbox(
                        "Columna para Duraci칩n", 
                        ['Duraci칩n'] + list(df.columns),
                        index=0 if 'Duraci칩n' in df.columns else -1
                    )
                
                # Bot칩n para procesar
                if st.button("Procesar archivo"):
                    # Renombrar columnas seg칰n mapeo
                    df_procesado = df.copy()
                    
                    if col_centro != 'Centro m칠dico' and col_centro in df_procesado.columns:
                        df_procesado['Centro m칠dico'] = df_procesado[col_centro]
                    
                    if col_sala != 'Sala de adquisici칩n' and col_sala in df_procesado.columns:
                        df_procesado['Sala de adquisici칩n'] = df_procesado[col_sala]
                    
                    if col_fecha != 'Fecha del procedimiento' and col_fecha in df_procesado.columns:
                        df_procesado['Fecha del procedimiento'] = df_procesado[col_fecha]
                    
                    if col_duracion != 'Duraci칩n' and col_duracion in df_procesado.columns:
                        df_procesado['Duraci칩n'] = df_procesado[col_duracion]
                    
                    # Procesar datos
                    with st.spinner("Procesando datos..."):
                        exito, mensaje = sistema.procesar_dataframe(df_procesado)
                    
                    if exito:
                        st.success(mensaje)
                    else:
                        st.error(mensaje)
        except Exception as e:
            st.error(f"Error al procesar el archivo: {e}")
    
    # Opciones para exportar/importar datos
    st.subheader("Exportar / Importar")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("Exportar todos los c칩digos a JSON"):
            try:
                # Crear un archivo temporal
                timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
                ruta_archivo = sistema.exportar_codigos_json()
                
                # Leer el archivo JSON para descargarlo
                with open(ruta_archivo, 'r') as f:
                    datos_json = f.read()
                
                # Bot칩n de descarga
                st.download_button(
                    label="Descargar archivo JSON",
                    data=datos_json,
                    file_name=f"codigos_examenes_{timestamp}.json",
                    mime="application/json"
                )
                
                st.success(f"Datos exportados correctamente: {os.path.basename(ruta_archivo)}")
            except Exception as e:
                st.error(f"Error al exportar datos: {e}")
    
    with col2:
        # Importar desde JSON
        archivo_json = st.file_uploader("Importar desde JSON", type=['json'])
        
        if archivo_json is not None:
            try:
                # Guardar archivo temporal
                bytes_data = archivo_json.getvalue()
                json_data = bytes_data.decode('utf-8')
                
                # Validar que es un JSON v치lido
                try:
                    json.loads(json_data)
                except:
                    st.error("El archivo no contiene JSON v치lido")
                    st.stop()
                
                # Guardar a archivo temporal
                temp_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 
                                        f"temp_import_{datetime.now().strftime('%Y%m%d%H%M%S')}.json")
                
                with open(temp_file, 'w') as f:
                    f.write(json_data)
                
                if st.button("Importar datos"):
                    with st.spinner("Importando datos..."):
                        exito, mensaje = sistema.importar_codigos_json(temp_file)
                    
                    if exito:
                        st.success(mensaje)
                    else:
                        st.error(mensaje)
                    
                    # Eliminar archivo temporal
                    if os.path.exists(temp_file):
                        os.remove(temp_file)
            except Exception as e:
                st.error(f"Error al importar datos: {e}")

# P치gina de gesti칩n de centros y salas
elif pagina == "Gesti칩n de Centros y Salas":
    st.title("Gesti칩n de Centros M칠dicos y Salas")
    
    tab1, tab2 = st.tabs(["Centros M칠dicos", "Salas de Adquisici칩n"])
    
    with tab1:
        st.subheader("Centros M칠dicos Registrados")
        
        # Obtener y mostrar centros existentes
        conn = conectar_db()
        cursor = conn.cursor()
        cursor.execute("SELECT id, nombre, codigo, direccion, region, conteo FROM centros_medicos ORDER BY nombre")
        centros = cursor.fetchall()
        conn.close()
        
        if centros:
            # Crear DataFrame
            centros_df = pd.DataFrame(centros, columns=['ID', 'Nombre', 'C칩digo', 'Direcci칩n', 'Regi칩n', 'Usos'])
            st.dataframe(centros_df, use_container_width=True)
        else:
            st.info("No hay centros m칠dicos registrados")
        
        # Formulario para agregar nuevo centro
        st.subheader("Agregar Nuevo Centro M칠dico")
        
        with st.form("form_nuevo_centro"):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre_centro = st.text_input("Nombre del centro", key="nombre_centro")
                codigo_centro = st.text_input("C칩digo (opcional)", key="codigo_centro")
            
            with col2:
                direccion_centro = st.text_input("Direcci칩n (opcional)", key="direccion_centro")
                region_centro = st.text_input("Regi칩n (opcional)", key="region_centro")
            
            submitted = st.form_submit_button("Registrar Centro")
            
            if submitted:
                if nombre_centro:
                    try:
                        centro_id, es_nuevo = sistema.registrar_centro_medico(
                            nombre_centro, codigo_centro, direccion_centro, region_centro
                        )
                        
                        if es_nuevo:
                            st.success(f"Centro m칠dico '{nombre_centro}' registrado con 칠xito!")
                        else:
                            st.info(f"El centro '{nombre_centro}' ya exist칤a. Se actualizaron sus datos.")
                        
                        # Recargar la p치gina para mostrar cambios
                        st.experimental_rerun()
                    except Exception as e:
                        st.error(f"Error al registrar centro: {e}")
                else:
                    st.warning("El nombre del centro es obligatorio")
    
    with tab2:
        st.subheader("Salas de Adquisici칩n Registradas")
        
        # Obtener y mostrar salas existentes
        conn = sistema._CodigosExamenes__db_connect()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT s.id, s.nombre, c.nombre, s.tipo_equipo, s.conteo 
            FROM salas_adquisicion s
            LEFT JOIN centros_medicos c ON s.centro_id = c.id
            ORDER BY c.nombre, s.nombre
        """)
        salas = cursor.fetchall()
        conn.close()
        
        if salas:
            # Crear DataFrame
            salas_df = pd.DataFrame(salas, columns=['ID', 'Nombre', 'Centro', 'Tipo Equipo', 'Usos'])
            st.dataframe(salas_df, use_container_width=True)
        else:
            st.info("No hay salas de adquisici칩n registradas")
        
        # Formulario para agregar nueva sala
        st.subheader("Agregar Nueva Sala de Adquisici칩n")
        
        with st.form("form_nueva_sala"):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre_sala = st.text_input("Nombre de la sala", key="nombre_sala")
                
                # Obtener lista de centros para seleccionar
                conn = conectar_db()
                cursor = conn.cursor()
                cursor.execute("SELECT id, nombre FROM centros_medicos ORDER BY nombre")
                centros_lista = cursor.fetchall()
                conn.close()
                
                if centros_lista:
                    centro_opciones = ["[Seleccione un centro]"] + [c[1] for c in centros_lista]
                    centro_sala = st.selectbox("Centro m칠dico", centro_opciones, key="centro_sala")
                    
                    if centro_sala == "[Seleccione un centro]":
                        centro_id = None
                    else:
                        centro_id = next((c[0] for c in centros_lista if c[1] == centro_sala), None)
                else:
                    st.warning("No hay centros m칠dicos registrados. Debe crear un centro primero.")
                    centro_id = None
                    centro_sala = None
            
            with col2:
                tipo_equipo_opciones = ["", "TAC", "RX", "RM", "US", "PET", "OTRO"]
                tipo_equipo = st.selectbox("Tipo de equipo", tipo_equipo_opciones, key="tipo_equipo")
                
                # Campo adicional para notas o descripci칩n
                notas_sala = st.text_area("Notas (opcional)", key="notas_sala")
            
            submitted = st.form_submit_button("Registrar Sala")
            
            if submitted:
                if nombre_sala and centro_sala and centro_sala != "[Seleccione un centro]":
                    try:
                        sala_id, es_nueva = sistema.registrar_sala(
                            nombre_sala, centro_id, None, tipo_equipo
                        )
                        
                        if es_nueva:
                            st.success(f"Sala '{nombre_sala}' registrada con 칠xito en {centro_sala}!")
                        else:
                            st.info(f"La sala '{nombre_sala}' ya exist칤a. Se actualizaron sus datos.")
                        
                        # Recargar la p치gina para mostrar cambios
                        st.experimental_rerun()
                    except Exception as e:
                        st.error(f"Error al registrar sala: {e}")
                else:
                    if not nombre_sala:
                        st.warning("El nombre de la sala es obligatorio")
                    if not centro_sala or centro_sala == "[Seleccione un centro]":
                        st.warning("Debe seleccionar un centro m칠dico")

# Iniciar la clase CodigosExamenes con m칠todo para conectar a la DB
# Asegurar que existe el directorio y la base de datos
import os
from codigo_examenes import REGISTROS_DIR, DB_FILE

# Asegurar que el directorio existe
if not os.path.exists(REGISTROS_DIR):
    os.makedirs(REGISTROS_DIR)

# Verificar si la base de datos existe, si no, inicializarla
if not os.path.exists(DB_FILE):
    sistema.inicializar_db()

# M칠todo de conexi칩n para Streamlit
def conectar_db():
    return sqlite3.connect(DB_FILE)


# Funci칩n principal
if __name__ == "__main__":
    # Se ejecuta al iniciar la aplicaci칩n
    pass