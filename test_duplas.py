#!/usr/bin/env python3
"""
Test espec√≠fico para verificar la detecci√≥n de duplas en el estimador de turnos
"""

import sys
import os
import pandas as pd

# Agregar el directorio actual al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_deteccion_duplas():
    """Probar la funcionalidad de detecci√≥n de duplas"""
    
    print("=== TEST DE DETECCI√ìN DE DUPLAS ===")
    
    try:
        # Importar la clase
        from calculadora_turnos import CalculadoraTurnos
        print("‚úì CalculadoraTurnos importado exitosamente")
        
        # Crear instancia
        calc = CalculadoraTurnos()
        print("‚úì Instancia creada exitosamente")
        
        # Verificar que el m√©todo existe
        if not hasattr(calc, 'estimar_dias_turno'):
            print("‚úó ERROR: m√©todo estimar_dias_turno no encontrado")
            return False
        
        print("‚úì M√©todo estimar_dias_turno encontrado")
        
        # Crear datos de prueba que simulen duplas reales
        datos_test = pd.DataFrame({
            'Fecha': [
                # DUPLA 1: 8-9 Mayo (alta concentraci√≥n)
                '08/05/2024', '08/05/2024', '08/05/2024', '08/05/2024', '08/05/2024', '08/05/2024',  # 6 ex√°menes
                '09/05/2024', '09/05/2024', '09/05/2024', '09/05/2024', '09/05/2024',  # 5 ex√°menes
                
                # DUPLA 2: 15-16 Mayo (alta concentraci√≥n)
                '15/05/2024', '15/05/2024', '15/05/2024', '15/05/2024', '15/05/2024',  # 5 ex√°menes
                '16/05/2024', '16/05/2024', '16/05/2024', '16/05/2024', '16/05/2024', '16/05/2024', '16/05/2024',  # 7 ex√°menes
                
                # DUPLA 3: 22-23 Mayo (concentraci√≥n media-alta)
                '22/05/2024', '22/05/2024', '22/05/2024', '22/05/2024',  # 4 ex√°menes
                '23/05/2024', '23/05/2024', '23/05/2024', '23/05/2024', '23/05/2024',  # 5 ex√°menes
                
                # D√≠as individuales con pocos ex√°menes (no deber√≠an ser seleccionados)
                '10/05/2024', '10/05/2024',  # 2 ex√°menes
                '11/05/2024',  # 1 examen
                '17/05/2024', '17/05/2024', '17/05/2024',  # 3 ex√°menes
                
                # D√çA INDIVIDUAL con alta concentraci√≥n 
                '25/05/2024', '25/05/2024', '25/05/2024', '25/05/2024', '25/05/2024', '25/05/2024', '25/05/2024',  # 7 ex√°menes
            ],
            'Examen': [f'Examen_{i}' for i in range(1, 54)]
        })
        
        print(f"‚úì Datos de prueba creados: {len(datos_test)} registros")
        print("\n  Distribuci√≥n por fecha (simulando duplas):")
        conteo_fechas = datos_test['Fecha'].value_counts().sort_index()
        for fecha, count in conteo_fechas.items():
            print(f"    {fecha}: {count} ex√°menes")
        
        # Ejecutar estimaci√≥n
        resultado = calc.estimar_dias_turno(datos_test)
        
        print(f"\n‚úì Estimaci√≥n ejecutada exitosamente")
        print(f"‚úì Resultado: {len(resultado)} turnos detectados")
        
        if resultado:
            print("\n  üéØ TURNOS ESTIMADOS (primeros d√≠as de cada dupla):")
            for i, (fecha, num_examenes) in enumerate(resultado, 1):
                print(f"    {i}. {fecha}: {num_examenes} ex√°menes")
                
            # Verificar que detect√≥ las duplas correctamente
            fechas_resultado = [fecha for fecha, _ in resultado]
            
            # Verificar que se detectaron entre 2 y 6 turnos
            if 2 <= len(resultado) <= 6:
                print(f"\n‚úì L√≠mites respetados: {len(resultado)} turnos (entre 2 y 6)")
            else:
                print(f"\n‚ö†Ô∏è  L√≠mites no respetados: {len(resultado)} turnos (deber√≠a ser entre 2 y 6)")
            
            # Verificar que prioriz√≥ d√≠as con m√°s ex√°menes
            examenes_ordenados = [num for _, num in resultado]
            if examenes_ordenados == sorted(examenes_ordenados, reverse=True):
                print("‚úì Turnos ordenados por n√∫mero de ex√°menes (mayor a menor)")
            else:
                print("‚ö†Ô∏è  Turnos NO est√°n ordenados correctamente")
                
        else:
            print("  ‚ö†Ô∏è  No se estimaron fechas de turno")
        
        return True
        
    except Exception as e:
        print(f"‚úó ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_deteccion_duplas()
    print(f"\n{'='*60}")
    if success:
        print("üéâ TEST DE DETECCI√ìN DE DUPLAS COMPLETADO EXITOSAMENTE")
    else:
        print("‚ùå TEST DE DETECCI√ìN DE DUPLAS FALL√ì")
    print(f"{'='*60}")
