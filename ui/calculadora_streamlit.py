#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Calculadora de Turnos en Radiolog√≠a - Versi√≥n Streamlit
-------------------------------------------------------
Aplicaci√≥n web para procesar datos de procedimientos m√©dicos en radiolog√≠a,
clasificar ex√°menes, calcular horas trabajadas y generar reportes.
"""

# Importaciones globales
import os
import sys
import pandas as pd
import numpy as np
import tempfile
import json
from datetime import datetime, timedelta
import streamlit as st
from dateutil import parser
# Importaciones adicionales para procesamiento de fechas mejorado
import re
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
import base64
import re
import importlib.util

# Agregar el directorio ra√≠z al path para importar m√≥dulos
RAIZ_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if RAIZ_DIR not in sys.path:
    sys.path.insert(0, RAIZ_DIR)

# Importar m√≥dulo de la calculadora
from calculadora_turnos import CalculadoraTurnos

# Intentar importar el sistema de aprendizaje
try:
    from aprendizaje_datos_sqlite import SistemaAprendizajeSQLite
    SISTEMA_APRENDIZAJE_DISPONIBLE = True
except ImportError:
    SISTEMA_APRENDIZAJE_DISPONIBLE = False

# Funci√≥n para generar enlaces de descarga de Excel
def generate_excel_download_link(df, filename):
    """Genera un enlace para descargar un DataFrame como Excel."""
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='openpyxl')
    df.to_excel(writer, index=False, sheet_name='Sheet1')
    writer.close()
    processed_data = output.getvalue()
    b64 = base64.b64encode(processed_data).decode()
    return f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">{filename}</a>'

# Funci√≥n para mostrar DataFrames interactivos
def mostrar_df_interactivo(df, key_prefix):
    """Muestra un DataFrame con opciones interactivas."""
    # Mostrar como tabla con ordenamiento y filtros
    st.dataframe(df, use_container_width=True)

# Funci√≥n principal de la aplicaci√≥n
def main():
    """Funci√≥n principal para configurar la interfaz Streamlit."""
    # Configuraci√≥n de la p√°gina
    st.set_page_config(
        page_title="Calculadora de Turnos en Radiolog√≠a",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    # CSS personalizado - dise√±o elegante y legible
    st.markdown("""
    <style>
    /* Estilo general y fuentes */
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
    html, body, [class*="css"] {
        font-family: 'Roboto', sans-serif;
    }
    
    /* Encabezado principal */
    .main-header {
        margin: 3rem 0 2rem 0;
        text-align: center;
    }
    .main-header h1 {
        color: #1E3A8A;
        font-size: 2.8rem;
        font-weight: 700;
        margin-bottom: 0.75rem;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
    .main-header p {
        font-size: 1.3rem;
        color: #475569;
    }
    
    /* Control del espacio para evitar solapamientos */
    .block-container {
        padding-top: 3rem !important;
        margin-top: 1rem;
    }
    
    /* Estilos para encabezados */
    h2 {
        color: #1E3A8A;
        border-bottom: 2px solid #3B82F6;
        padding-bottom: 0.5rem;
        margin-top: 2rem;
        font-weight: 600;
    }
    h3 {
        color: #1E40AF;
        margin-top: 1.5rem;
        font-weight: 500;
    }
    
    /* Estilo para pesta√±as */
    .stTabs [data-baseweb="tab-list"] {
        gap: 12px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 54px;
        white-space: pre-wrap;
        background-color: #EFF6FF;
        border-radius: 8px;
        border: 1px solid #DBEAFE;
        padding: 12px 18px;
        font-size: 16px;
        font-weight: 500;
        color: #2563EB;
    }
    .stTabs [aria-selected="true"] {
        background-color: #2563EB;
        color: white;
        border: 1px solid #1E40AF;
    }
    
    /* Estilo para botones */
    .stButton>button {
        font-weight: 600;
        border-radius: 8px;
        padding: 4px 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Estilo para dataframes */
    .dataframe {
        border-collapse: separate !important;
        border-spacing: 0 !important;
        border-radius: 8px !important;
        overflow: hidden !important;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05) !important;
    }
    .dataframe th {
        background-color: #EFF6FF !important;
        color: #1E40AF !important;
        font-weight: 600 !important;
        border-top: none !important;
    }
    .dataframe td {
        border-top: 1px solid #E5E7EB !important;
    }
    
    /* Estilo para m√©tricas */
    div[data-testid="stMetricValue"] {
        font-size: 1.8rem !important;
        font-weight: 700 !important;
        color: #1E3A8A !important;
    }
    div[data-testid="stMetricLabel"] {
        font-size: 1.1rem !important;
        font-weight: 500 !important;
    }
    </style>
    """, unsafe_allow_html=True)

    # T√≠tulo y descripci√≥n en un contenedor personalizado - m√°s contrastado
    st.markdown('<div class="main-header"><h1>üìä Calculadora de Turnos en Radiolog√≠a</h1><p>Procesamiento y an√°lisis inteligente de procedimientos m√©dicos</p></div>', unsafe_allow_html=True)

    # Inicializar la sesi√≥n
    if 'calculadora' not in st.session_state:
        st.session_state.calculadora = CalculadoraTurnos()
        st.session_state.archivo_cargado = False
        st.session_state.datos_filtrados = False
        st.session_state.examenes_clasificados = False
        st.session_state.dias_turno = []  # Lista para almacenar fechas de turno (fecha, es_feriado)

    # Inicializar sistema de aprendizaje si est√° disponible
    if SISTEMA_APRENDIZAJE_DISPONIBLE and 'sistema_aprendizaje' not in st.session_state:
        try:
            st.session_state.sistema_aprendizaje = SistemaAprendizajeSQLite()
        except Exception as e:
            st.error(f"Error al inicializar sistema de aprendizaje: {e}")

    # Sidebar con opciones principales
    with st.sidebar:
        st.header("Navegaci√≥n")
        
        if not st.session_state.archivo_cargado:
            st.info("üëâ Cargue un archivo CSV para comenzar")
        else:
            st.success("‚úÖ Archivo cargado")
            
            # Botones de navegaci√≥n en el sidebar
            if st.button("Volver al inicio"):
                st.session_state.pop('archivo_cargado')
                st.rerun()
        
        # Mostrar informaci√≥n sobre el sistema de aprendizaje
        st.header("Informaci√≥n del Sistema")
        
        if SISTEMA_APRENDIZAJE_DISPONIBLE:
            st.success("‚úÖ Sistema de aprendizaje SQLite disponible")
        else:
            st.warning("‚ö†Ô∏è Sistema de aprendizaje no disponible")
        
        # Asistente b√°sico siempre disponible
        st.success("‚úÖ Asistente b√°sico disponible")
            
        st.markdown("---")
        st.markdown("### Acerca de")
        st.markdown("""
        **Calculadora de Turnos en Radiolog√≠a**
        
        Versi√≥n 0.8.1
        
        Desarrollada para automatizar el proceso de c√°lculo de turnos,
        informes radiol√≥gicos y honorarios profesionales.
        
        Con dise√±o optimizado, asistente simplificado integrado
        y an√°lisis inteligente de ex√°menes m√©dicos.
        """)

    # Secci√≥n para cargar el archivo CSV
    st.subheader("Cargar Archivo")
    uploaded_file = st.file_uploader("Seleccione el archivo CSV", type=['csv'])
    
    if uploaded_file is not None and (not st.session_state.archivo_cargado or 
                                      uploaded_file.name != st.session_state.get('archivo_nombre', '')):
        with st.spinner("Cargando archivo..."):
            # Guardar temporalmente el archivo
            temp_file = os.path.join(tempfile.mkdtemp(), uploaded_file.name)
            with open(temp_file, 'wb') as f:
                f.write(uploaded_file.getbuffer())
            
            # Cargar el archivo con la calculadora
            exito, mensaje = st.session_state.calculadora.cargar_archivo(temp_file)
            if exito:
                st.success(mensaje)
                st.session_state.archivo_cargado = True
                st.session_state.archivo_nombre = uploaded_file.name
                st.session_state.archivo_ruta = temp_file
                st.session_state.uploaded_csv = uploaded_file
                
                # Continuar con el procesamiento
                exito, mensaje = st.session_state.calculadora.filtrar_datos()
                if exito:
                    st.info(mensaje)
                    st.session_state.datos_filtrados = True
                    
                    # Clasificar ex√°menes
                    exito, mensaje = st.session_state.calculadora.clasificar_examenes()
                    if exito:
                        st.success(mensaje)
                        st.session_state.examenes_clasificados = True
                        
                        # Aprender de los datos clasificados si el sistema est√° disponible
                        # Desactivado temporalmente para evitar el error "database is locked"
                        if False and SISTEMA_APRENDIZAJE_DISPONIBLE and hasattr(st.session_state, 'sistema_aprendizaje'):
                            with st.spinner("Analizando y aprendiendo patrones de datos..."):
                                try:
                                    exito_aprend, msg_aprend = st.session_state.sistema_aprendizaje.analizar_dataframe(
                                        st.session_state.calculadora.data_filtrada
                                    )
                                    if exito_aprend and 'TAC doble' in st.session_state.calculadora.data_filtrada.columns:
                                        st.session_state.sistema_aprendizaje.aprender_patrones_tac_doble(
                                            st.session_state.calculadora.data_filtrada
                                        )
                                    st.success("Sistema de aprendizaje actualizado con nuevos patrones")
                                except Exception as e:
                                    st.warning(f"No se pudo actualizar el sistema de aprendizaje: {e}")

    # Contenido principal cuando un archivo est√° cargado
    if st.session_state.archivo_cargado:
        # Crear pesta√±as para organizar la interfaz con nombres mejorados
        tab_names = ["üìä Visualizaci√≥n", "üî¨ An√°lisis de Ex√°menes", "üìù Reportes"]
        
        # Agregar pesta√±a para asistente simplificado (sin depender de phi-2)
        tab_names.append("ü§ñ Asistente B√°sico")
        
        # Usar active_tab para seleccionar la pesta√±a activa por defecto
        active_tab_index = st.session_state.get('active_tab', 0)
        
        # Asegurar que el √≠ndice es v√°lido
        if active_tab_index >= len(tab_names):
            active_tab_index = 0
            st.session_state.active_tab = 0
            
        tabs = st.tabs(tab_names)
        
        # Tab 1: Visualizaci√≥n de Datos
        with tabs[0]:
            st.header("Visualizaci√≥n de Datos")
            
            # Mostrar los datos cargados
            if st.session_state.calculadora.data_filtrada is not None:
                st.subheader("Vista previa de datos")
                df = st.session_state.calculadora.data_filtrada
                
                # Seleccionar las columnas en el orden deseado
                columnas = [
                    'N√∫mero de cita',
                    'Fecha del procedimiento programado',
                    'Apellidos del paciente',
                    'Nombre del paciente',
                    'Nombre del procedimiento',
                    'Sala de adquisici√≥n',
                    'Tipo'
                ]
                
                # Verificar que todas las columnas existen
                columnas_disponibles = [col for col in columnas if col in df.columns]
                
                # Renombrar columnas para que sean m√°s cortas y elegantes
                df_display = df[columnas_disponibles].copy()
                nombres_nuevos = {
                    'N√∫mero de cita': 'N¬∫ Cita',
                    'Fecha del procedimiento programado': 'Fecha',
                    'Apellidos del paciente': 'Apellidos',
                    'Nombre del paciente': 'Nombre',
                    'Nombre del procedimiento': 'Procedimiento',
                    'Sala de adquisici√≥n': 'Sala'
                }
                
                df_display.rename(columns={k: v for k, v in nombres_nuevos.items() if k in df_display.columns}, 
                               inplace=True)
                
                # Barra de b√∫squeda para filtrar datos en tiempo real
                st.subheader("B√∫squeda de ex√°menes")
                col1, col2 = st.columns([3, 1])
                with col1:
                    busqueda = st.text_input("B√∫squeda (nombre, apellido, ID, procedimiento...)", 
                                           key="busqueda_examen")
                with col2:
                    tipo_filtro = st.selectbox("Tipo", ["Todos", "RX", "TAC", "TAC doble", "TAC triple"], key="tipo_filtro")
                
                # Filtrar por texto de b√∫squeda
                df_filtrado = df_display
                if busqueda:
                    # Buscar en todas las columnas
                    mask = pd.Series(False, index=df_filtrado.index)
                    for col in df_filtrado.columns:
                        mask |= df_filtrado[col].astype(str).str.contains(busqueda, case=False, na=False)
                    df_filtrado = df_filtrado[mask]
                
                # Filtrar por tipo
                original_index = df_filtrado.index.tolist()
                if tipo_filtro == "RX":
                    indices = [i for i in original_index if df['Tipo'].iloc[i] == 'RX']
                    df_filtrado = df_filtrado.loc[indices]
                elif tipo_filtro == "TAC":
                    indices = [i for i in original_index if df['Tipo'].iloc[i] == 'TAC']
                    df_filtrado = df_filtrado.loc[indices]
                elif tipo_filtro == "TAC doble":
                    if 'TAC doble' in df.columns:
                        indices = [i for i in original_index if df['TAC doble'].iloc[i] == True]
                        df_filtrado = df_filtrado.loc[indices]
                    else:
                        st.warning("No hay datos con clasificaci√≥n de TAC doble")
                        df_filtrado = pd.DataFrame(columns=df.columns)
                elif tipo_filtro == "TAC triple":
                    if 'TAC triple' in df.columns:
                        indices = [i for i in original_index if df['TAC triple'].iloc[i] == True]
                        df_filtrado = df_filtrado.loc[indices]
                    else:
                        st.warning("No hay datos con clasificaci√≥n de TAC triple")
                        df_filtrado = pd.DataFrame(columns=df.columns)
                
                # Calcular m√©tricas avanzadas
                total_examenes = len(df)
                total_rx = len(df[df['Tipo'] == 'RX'])
                total_tac_base = len(df[df['Tipo'] == 'TAC'])
                
                # Contar TAC dobles y triples
                tac_dobles = sum(df['TAC doble']) if 'TAC doble' in df.columns else 0
                tac_triples = sum(df['TAC triple']) if 'TAC triple' in df.columns else 0
                
                # Calcular TAC total corregido (cada doble cuenta como 2, cada triple como 3)
                tac_total_corregido = total_tac_base + tac_dobles + (tac_triples * 2)
                
                # Mostrar m√©tricas de resultados en dos filas
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("üìä Total de ex√°menes", total_examenes)
                with col2:
                    st.metric("üíâ Total RX", total_rx)
                
                # Segunda fila para m√©tricas de TAC
                st.markdown("### üìã Detalles de TAC")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üñ•Ô∏è TAC base", total_tac_base)
                with col2:
                    st.metric("üîÑ TAC total corregido", tac_total_corregido, 
                             delta=tac_dobles + (tac_triples * 2) if (tac_dobles + tac_triples) > 0 else None,
                             delta_color="normal")
                with col3:
                    if tac_dobles > 0 or tac_triples > 0:
                        st.metric("‚ö†Ô∏è TAC especiales", 
                                 f"{tac_dobles} dobles, {tac_triples} triples")
                    else:
                        st.metric("‚ö†Ô∏è TAC especiales", "Ninguno")
                
                # Vi√±eta para mostrar detalles de TAC dobles/triples
                if tac_dobles > 0 or tac_triples > 0:
                    with st.expander("Ver detalles de TAC dobles y triples"):
                        # Preparar datos para mostrar
                        if tac_dobles > 0:
                            st.subheader("üìë TAC dobles")
                            tac_dobles_df = df[df['TAC doble'] == True].copy() if 'TAC doble' in df.columns else pd.DataFrame()
                            
                            if not tac_dobles_df.empty:
                                # Seleccionar columnas relevantes
                                cols_mostrar = ['Fecha del procedimiento programado', 'Nombre del procedimiento', 'Sala de adquisici√≥n']
                                cols_disponibles = [c for c in cols_mostrar if c in tac_dobles_df.columns]
                                
                                # Renombrar columnas para mejor visualizaci√≥n
                                nombres_cols = {
                                    'Fecha del procedimiento programado': 'Fecha',
                                    'Nombre del procedimiento': 'Procedimiento',
                                    'Sala de adquisici√≥n': 'Sala'
                                }
                                
                                df_mostrar = tac_dobles_df[cols_disponibles].copy()
                                df_mostrar.rename(columns={k: v for k, v in nombres_cols.items() if k in df_mostrar.columns}, inplace=True)
                                
                                # Mostrar tabla interactiva
                                st.dataframe(df_mostrar, use_container_width=True)
                        
                        if tac_triples > 0:
                            st.subheader("üìë TAC triples")
                            tac_triples_df = df[df['TAC triple'] == True].copy() if 'TAC triple' in df.columns else pd.DataFrame()
                            
                            if not tac_triples_df.empty:
                                # Seleccionar columnas relevantes
                                cols_mostrar = ['Fecha del procedimiento programado', 'Nombre del procedimiento', 'Sala de adquisici√≥n']
                                cols_disponibles = [c for c in cols_mostrar if c in tac_triples_df.columns]
                                
                                # Renombrar columnas para mejor visualizaci√≥n
                                df_mostrar = tac_triples_df[cols_disponibles].copy()
                                df_mostrar.rename(columns={k: v for k, v in nombres_cols.items() if k in df_mostrar.columns}, inplace=True)
                                
                                # Mostrar tabla interactiva
                                st.dataframe(df_mostrar, use_container_width=True)
                
                # Mostrar tabla de resultados filtrados
                if not df_filtrado.empty:
                    st.dataframe(df_filtrado, use_container_width=True)
                    st.info(f"Mostrando {len(df_filtrado)} de {len(df)} ex√°menes")
                else:
                    st.warning("No hay ex√°menes que coincidan con los criterios de b√∫squeda")
                
                # Secci√≥n para fechas de turno
                st.subheader("Selecci√≥n de d√≠as de turno")
                
                # Mostrar fechas de turno seleccionadas
                if st.session_state.dias_turno:
                    st.write("D√≠as de turno seleccionados:")
                    
                    # Mostrar tabla de fechas
                    dias_data = []
                    for fecha, es_feriado in st.session_state.dias_turno:
                        # Convertir fecha a objeto datetime para obtener d√≠a de semana
                        try:
                            # Convertir formato espa√±ol a ingl√©s si es necesario
                            fecha_procesada = fecha
                            for mes_esp, mes_eng in [('ene', 'jan'), ('abr', 'apr'), ('ago', 'aug'), ('dic', 'dec')]:
                                if mes_esp in fecha_procesada.lower():
                                    fecha_procesada = fecha_procesada.lower().replace(mes_esp, mes_eng)
                            
                            fecha_dt = parser.parse(fecha_procesada)
                            dia_semana = fecha_dt.strftime('%A')
                            
                            # Traducir d√≠a de semana si est√° en ingl√©s
                            dias_es = {
                                'Monday': 'Lunes', 'Tuesday': 'Martes', 'Wednesday': 'Mi√©rcoles',
                                'Thursday': 'Jueves', 'Friday': 'Viernes', 'Saturday': 'S√°bado', 'Sunday': 'Domingo'
                            }
                            if dia_semana in dias_es:
                                dia_semana = dias_es[dia_semana]
                        
                        except:
                            dia_semana = "Desconocido"
                        
                        # Calcular horas basadas en d√≠a de semana o feriado
                        if es_feriado:
                            horas = 24 if dia_semana in ['Viernes', 'Friday'] else 23
                            tipo = "Feriado"
                        else:
                            if dia_semana in ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Monday', 'Tuesday', 'Wednesday', 'Thursday']:
                                horas = 14  # L-J: 18:00 a 08:00 (14 horas)
                            elif dia_semana in ['Viernes', 'Friday']:
                                horas = 15  # V: 18:00 a 09:00 (15 horas)
                            elif dia_semana in ['S√°bado', 'Saturday']:
                                horas = 24  # S: 09:00 a 09:00 (24 horas)
                            else:  # Domingo
                                horas = 23  # D: 09:00 a 08:00 (23 horas)
                            tipo = "Normal"
                        
                        dias_data.append({
                            "Fecha": fecha,
                            "D√≠a": dia_semana,
                            "Tipo": tipo,
                            "Horas": horas,
                            "Eliminar": False
                        })
                    
                    # Crear DataFrame y mostrar como tabla editable
                    df_dias = pd.DataFrame(dias_data)
                    
                    # Mostrar dataframe
                    edited_df = st.data_editor(
                        df_dias,
                        column_config={
                            "Eliminar": st.column_config.CheckboxColumn(
                                "Eliminar",
                                help="Marque para eliminar este d√≠a"
                            )
                        },
                        hide_index=True
                    )
                    
                    # Calcular total de horas
                    total_horas = sum(df_dias["Horas"])
                    st.info(f"Total de horas: {total_horas}")
                    
                    # Bot√≥n para eliminar d√≠as seleccionados
                    if st.button("Eliminar d√≠as marcados"):
                        # Identificar fechas a eliminar
                        fechas_eliminar = []
                        for i, row in edited_df.iterrows():
                            if row["Eliminar"]:
                                fechas_eliminar.append(row["Fecha"])
                        
                        # Eliminar de la lista de d√≠as de turno
                        if fechas_eliminar:
                            st.session_state.dias_turno = [
                                (fecha, feriado) for fecha, feriado in st.session_state.dias_turno
                                if fecha not in fechas_eliminar
                            ]
                            st.success(f"Se eliminaron {len(fechas_eliminar)} d√≠as de turno")
                            st.rerun()
                
                # Secci√≥n de selecci√≥n de fechas mejorada
                st.write("## üìÖ Selecci√≥n de Fechas de Turno")
                
                # Crear tabs para diferentes m√©todos de selecci√≥n
                fecha_tabs = st.tabs(["üßô‚Äç‚ôÇÔ∏è Asistente de Fechas", "üìã Selector Calendario"])
                
                # Tab 1: Asistente de fechas (estimador autom√°tico)
                with fecha_tabs[0]:
                    st.markdown("### üîç Sugerencia autom√°tica de d√≠as de turno")
                    st.markdown("El sistema detectar√° los d√≠as con mayor actividad y los sugerir√° como d√≠as de turno.")
                    
                    # Bot√≥n para estimaci√≥n autom√°tica usando el m√©todo unificado
                    if st.button("‚ú® ESTIMAR FECHAS AUTOM√ÅTICAMENTE ‚ú®", type="primary", use_container_width=True):
                        try:
                            with st.spinner("üîç Analizando patrones de duplas en los datos..."):
                                # Verificar que hay datos
                                if len(df) == 0:
                                    st.error("No hay datos cargados para analizar.")
                                    return
                                
                                # Usar el m√©todo estimar_dias_turno del archivo principal
                                st.info("ü§ñ Usando algoritmo avanzado de detecci√≥n de duplas...")
                                resultado_estimacion = st.session_state.calculadora.estimar_dias_turno(df)
                                
                                if resultado_estimacion:
                                    st.success(f"‚úÖ Se detectaron {len(resultado_estimacion)} posibles d√≠as de turno")
                                    
                                    # Mostrar informaci√≥n sobre l√≠mites aplicados
                                    st.info(f"üéØ **Algoritmo de duplas aplicado**: Se detectaron d√≠as consecutivos con alta concentraci√≥n de ex√°menes. L√≠mites: m√≠nimo 2, m√°ximo 6 turnos.")
                                    
                                    # Preparar datos para mostrar
                                    fechas_sugeridas = []
                                    for fecha_esp, total_examenes in resultado_estimacion:
                                        fechas_sugeridas.append({
                                            'Fecha': fecha_esp,
                                            'Ex√°menes': total_examenes,
                                            'Seleccionar': True,
                                            'Es Feriado': False
                                        })
                                    
                                    # Convertir a DataFrame para mostrar
                                    sugerencias_df = pd.DataFrame(fechas_sugeridas)
                                    
                                    # Mostrar tabla de sugerencias
                                    st.markdown("### üìã D√≠as de turno sugeridos (basados en duplas)")
                                    edited_sugerencias = st.data_editor(
                                        sugerencias_df,
                                        column_config={
                                            "Seleccionar": st.column_config.CheckboxColumn(
                                                "A√±adir",
                                                help="Marque para a√±adir esta fecha"
                                            ),
                                            "Es Feriado": st.column_config.CheckboxColumn(
                                                "Feriado",
                                                help="Marque si el d√≠a fue feriado"
                                            ),
                                            "Ex√°menes": st.column_config.NumberColumn(
                                                "Cantidad",
                                                help="Total de ex√°menes en esta dupla o d√≠a individual"
                                            ),
                                            "Fecha": st.column_config.TextColumn(
                                                "Fecha",
                                                help="Fecha en formato dd-mmm-yyyy"
                                            )
                                        },
                                        hide_index=True,
                                        use_container_width=True
                                    )
                                    
                                    # Bot√≥n para agregar fechas seleccionadas
                                    col1, col2 = st.columns([1, 2])
                                    with col1:
                                        if st.button("Agregar seleccionadas", type="primary"):
                                            # Identificar fechas seleccionadas
                                            dias_agregar = []
                                            for _, row in edited_sugerencias.iterrows():
                                                if row["Seleccionar"]:
                                                    dias_agregar.append((row["Fecha"], row["Es Feriado"]))
                                            
                                            # Agregar a la lista de d√≠as de turno
                                            if dias_agregar:
                                                # Filtrar fechas que ya existen
                                                fechas_existentes = [fecha for fecha, _ in st.session_state.dias_turno]
                                                nuevas_fechas = [(fecha, es_feriado) for fecha, es_feriado in dias_agregar if fecha not in fechas_existentes]
                                                
                                                if nuevas_fechas:
                                                    st.session_state.dias_turno.extend(nuevas_fechas)
                                                    st.success(f"‚úÖ Se agregaron {len(nuevas_fechas)} d√≠as de turno")
                                                    st.rerun()
                                                else:
                                                    st.warning("Todas las fechas ya est√°n en la lista")
                                    
                                    # Texto de ayuda
                                    with col2:
                                        st.info("üí° **Duplas**: D√≠as consecutivos con alta concentraci√≥n de ex√°menes. Se selecciona el primer d√≠a de cada dupla.")
                                
                                else:
                                    st.warning("‚ö†Ô∏è No se detectaron duplas o d√≠as con suficiente actividad para sugerir como turnos.")
                                    st.info("Intente con el selector manual de fechas en la pesta√±a siguiente.")
                                
                        except Exception as e:
                            st.error(f"Error en la estimaci√≥n de fechas: {str(e)}")
                            import traceback
                            st.code(traceback.format_exc())
                
                # Tab 2: Selector de calendario
                with fecha_tabs[1]:
                    st.markdown("### üìÜ Seleccionar fecha manualmente")
                    
                    # Usar un date input de Streamlit
                    col1, col2 = st.columns(2)
                    with col1:
                        # Usar date_input de streamlit
                        fecha_seleccionada = st.date_input(
                            "Seleccione una fecha:",
                            value=None,
                            format="DD/MM/YYYY"
                        )
                    
                    with col2:
                        # Checkbox para feriado
                        es_feriado_manual = st.checkbox("Es d√≠a feriado", key="feriado_checkbox_manual")
                    
                    # Bot√≥n para agregar la fecha
                    if st.button("Agregar esta fecha", use_container_width=True):
                        if fecha_seleccionada:
                            # Convertir a formato esperado (dd-mmm-yyyy)
                            meses_abbr = {
                                1: 'ene', 2: 'feb', 3: 'mar', 4: 'abr', 5: 'may', 6: 'jun',
                                7: 'jul', 8: 'ago', 9: 'sep', 10: 'oct', 11: 'nov', 12: 'dic'
                            }
                            
                            fecha_formateada = f"{fecha_seleccionada.day:02d}-{meses_abbr[fecha_seleccionada.month]}-{fecha_seleccionada.year}"
                            
                            # Verificar si ya existe
                            if any(fecha == fecha_formateada for fecha, _ in st.session_state.dias_turno):
                                st.warning(f"‚ö†Ô∏è La fecha {fecha_formateada} ya est√° en la lista")
                            else:
                                # Agregar a la lista
                                st.session_state.dias_turno.append((fecha_formateada, es_feriado_manual))
                                st.success(f"‚úÖ Fecha {fecha_formateada} agregada correctamente")
                                st.rerun()
                        else:
                            st.error("‚õî Por favor seleccione una fecha v√°lida")
                
                # An√°lisis visual de los datos
                st.subheader("An√°lisis Visual")
                
                # A√±adir gr√°fico de distribuci√≥n por tipo
                if 'Tipo' in df.columns:
                    # Contar por tipo
                    tipo_counts = df['Tipo'].value_counts().reset_index()
                    tipo_counts.columns = ['Tipo', 'Cantidad']
                    
                    # Gr√°fico de barras
                    fig = px.bar(
                        tipo_counts, 
                        x='Tipo', 
                        y='Cantidad', 
                        color='Tipo',
                        title='Distribuci√≥n de Ex√°menes por Tipo',
                        labels={'Tipo': 'Tipo de Examen', 'Cantidad': 'N√∫mero de Ex√°menes'},
                        color_discrete_map={'RX': '#2196F3', 'TAC': '#FF5722'}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                # Distribuci√≥n por sala
                if 'Sala de adquisici√≥n' in df.columns:
                    # Contar por sala
                    sala_counts = df['Sala de adquisici√≥n'].value_counts().reset_index()
                    sala_counts.columns = ['Sala', 'Cantidad']
                    
                    # Limitar a las 10 salas m√°s frecuentes
                    if len(sala_counts) > 10:
                        sala_counts = sala_counts.head(10)
                    
                    # Gr√°fico de barras horizontal
                    fig = px.bar(
                        sala_counts, 
                        y='Sala', 
                        x='Cantidad', 
                        orientation='h',
                        title='Distribuci√≥n de Ex√°menes por Sala (Top 10)',
                        labels={'Sala': 'Sala de Adquisici√≥n', 'Cantidad': 'N√∫mero de Ex√°menes'},
                        color='Cantidad',
                        color_continuous_scale='Viridis'
                    )
                    st.plotly_chart(fig, use_container_width=True)

        # Tab 2: An√°lisis de Ex√°menes
        with tabs[1]:
            st.header("An√°lisis de Ex√°menes")
            
            if st.session_state.examenes_clasificados:
                # Mostrar detalles de ex√°menes por tipo
                st.subheader("Ex√°menes de Radiograf√≠a (RX)")
                df_rx = st.session_state.calculadora.data_filtrada[
                    st.session_state.calculadora.data_filtrada['Tipo'] == 'RX'
                ]
                
                # Mismo formato que en la visualizaci√≥n
                columnas = [
                    'N√∫mero de cita',
                    'Fecha del procedimiento programado',
                    'Apellidos del paciente',
                    'Nombre del paciente',
                    'Nombre del procedimiento',
                    'Sala de adquisici√≥n'
                ]
                columnas_disponibles = [col for col in columnas if col in df_rx.columns]
                df_rx_display = df_rx[columnas_disponibles].copy()
                df_rx_display.rename(columns={k: v for k, v in nombres_nuevos.items() if k in df_rx_display.columns}, 
                                  inplace=True)
                
                # A√±adir columna de checklist para verificaci√≥n
                if not df_rx_display.empty:
                    mostrar_df_interactivo(df_rx_display, "rx_table")
                    st.text(f"Total de ex√°menes RX: {len(df_rx_display)}")
                else:
                    st.info("No hay ex√°menes de tipo RX")
                
                st.subheader("Ex√°menes de Tomograf√≠a (TAC)")
                df_tac = st.session_state.calculadora.data_filtrada[
                    st.session_state.calculadora.data_filtrada['Tipo'] == 'TAC'
                ]
                
                columnas_disponibles = [col for col in columnas if col in df_tac.columns]
                df_tac_display = df_tac[columnas_disponibles].copy()
                df_tac_display.rename(columns={k: v for k, v in nombres_nuevos.items() if k in df_tac_display.columns}, 
                                   inplace=True)
                
                if not df_tac_display.empty:
                    # Identificar TAC dobles
                    tac_dobles = st.session_state.calculadora.data_filtrada[
                        st.session_state.calculadora.data_filtrada['TAC doble'] == True
                    ]
                    tac_dobles_ids = set(tac_dobles['N√∫mero de cita'])
                    
                    # Resaltar TAC dobles (esto funcionar√≠a mejor con aggrid o similar)
                    st.text("Los ex√°menes TAC doble est√°n marcados con asterisco (*)")
                    df_tac_display['N¬∫ Cita'] = df_tac_display['N¬∫ Cita'].apply(
                        lambda x: f"{x} *" if x in tac_dobles_ids else x
                    )
                    
                    mostrar_df_interactivo(df_tac_display, "tac_table")
                    
                    # Conteos
                    tac_simples = len(df_tac) - len(tac_dobles)
                    st.text(f"Total de ex√°menes TAC: {len(df_tac)} (simples: {tac_simples}, dobles: {len(tac_dobles)})")
                    
                    # Secci√≥n para verificar TAC dobles
                    with st.expander("Verificar detecci√≥n de TAC dobles", expanded=False):
                        st.write("Esta secci√≥n muestra ejemplos de TAC dobles detectados seg√∫n diferentes patrones")
                        
                        # Patrones espec√≠ficos a verificar
                        patrones_verificar = [
                            "TX/ABD/PEL",
                            "Torax-Abdomen-Pelvis",
                            "T√≥rax Abdomen Pelvis",
                            "t√≥rax, abdomen y pelvis",
                            "torax, abdomen"
                        ]
                        
                        # Buscar TAC dobles por patr√≥n
                        for patron in patrones_verificar:
                            examenes_patron = st.session_state.calculadora.data_filtrada[
                                st.session_state.calculadora.data_filtrada['Nombre del procedimiento'].str.contains(
                                    patron, case=False, na=False
                                )
                            ]
                            
                            if not examenes_patron.empty:
                                # Crear tabla para mostrar
                                df_patron = examenes_patron[['N√∫mero de cita', 'Nombre del procedimiento', 'TAC doble']].copy()
                                
                                # Contar cu√°ntos fueron detectados como dobles
                                total_patron = len(df_patron)
                                clasificados_doble = sum(df_patron['TAC doble'])
                                
                                st.write(f"**Patr√≥n '{patron}'**: {clasificados_doble} de {total_patron} detectados como TAC doble")
                                
                                if clasificados_doble < total_patron:
                                    st.warning(f"‚ö†Ô∏è ¬°Atenci√≥n! {total_patron - clasificados_doble} ex√°menes con patr√≥n '{patron}' NO fueron clasificados como TAC doble")
                                
                                # Mostrar los primeros ejemplos
                                st.dataframe(df_patron.head(5))
                else:
                    st.info("No hay ex√°menes de tipo TAC")
                
        # Tab 3: Generar Reportes
        with tabs[2]:
            st.header("Generar Reportes")
            
            st.subheader("Generaci√≥n de Archivos Excel y Correo")
            
            # Crear columnas para organizar la interfaz
            col1, col2 = st.columns([1, 1])
            
            with col1:
                # Configuraci√≥n del doctor
                nombre_doctor = st.text_input("Nombre del Doctor", 
                                          value=st.session_state.get('nombre_doctor', 'Cikutovic'),
                                          key="nombre_doc_reportes")
                
                # Guardar el nombre del doctor en la sesi√≥n
                if nombre_doctor != st.session_state.get('nombre_doctor', ''):
                    st.session_state.nombre_doctor = nombre_doctor
                
                # Selecci√≥n de directorio de salida
                # Crear directorio de salida por defecto
                ruta_actual = os.path.dirname(os.path.abspath(__file__))
                fecha_actual = datetime.now()
                mes = fecha_actual.strftime("%B").upper()
                a√±o = fecha_actual.strftime("%Y")
                
                # Traducir mes a espa√±ol si es necesario
                meses_es = {
                    "JANUARY": "ENERO", "FEBRUARY": "FEBRERO", "MARCH": "MARZO", "APRIL": "ABRIL",
                    "MAY": "MAYO", "JUNE": "JUNIO", "JULY": "JULIO", "AUGUST": "AGOSTO",
                    "SEPTEMBER": "SEPTIEMBRE", "OCTOBER": "OCTUBRE", "NOVEMBER": "NOVIEMBRE", "DECEMBER": "DICIEMBRE"
                }
                
                if mes in meses_es:
                    mes = meses_es[mes]
                
                directorio_defecto = os.path.join(ruta_actual, "csv", f"TURNOS {mes} {a√±o}")
                
                # Mostrar ruta y bot√≥n para cambiar
                st.text(f"Directorio de salida: {directorio_defecto}")
                if st.button("Cambiar directorio"):
                    # Aqu√≠ se podr√≠a a√±adir un selector, pero Streamlit no tiene uno nativo
                    # por lo que usamos el predeterminado
                    pass
            
            with col2:
                # Mostrar configuraci√≥n de fechas de turno
                st.text("Fechas de turno seleccionadas:")
                
                if hasattr(st.session_state, 'dias_turno') and st.session_state.dias_turno:
                    for fecha, es_feriado in st.session_state.dias_turno:
                        st.text(f"‚úì {fecha} {'(FERIADO)' if es_feriado else ''}")
                else:
                    st.warning("No hay fechas de turno seleccionadas. Seleccione fechas en la pesta√±a Visualizaci√≥n.")
            
            # Separador visual
            st.divider()
            
            # Bot√≥n para generar reportes
            if st.button("Generar Reportes Excel", type="primary"):
                if not hasattr(st.session_state, 'dias_turno') or not st.session_state.dias_turno:
                    st.error("Debe seleccionar al menos una fecha de turno")
                else:
                    # Crear directorio si no existe
                    os.makedirs(directorio_defecto, exist_ok=True)
                    
                    # Preparar fechas en formato correcto para la calculadora
                    fechas_turno = ','.join([fecha for fecha, _ in st.session_state.dias_turno])
                    
                    # Ejecutar procesamiento
                    with st.spinner("Procesando datos y generando reportes..."):
                        # Si tenemos el CSV cargado en la sesi√≥n, lo usamos directamente
                        if 'uploaded_csv' in st.session_state:
                            # Guardar temporalmente el archivo
                            temp_dir = tempfile.mkdtemp()
                            temp_file = os.path.join(temp_dir, st.session_state.archivo_nombre)
                            
                            with open(temp_file, 'wb') as f:
                                f.write(st.session_state.uploaded_csv.getbuffer())
                            
                            # Ejecutar procesamiento con la ruta temporal
                            exito, resultado = st.session_state.calculadora.procesar_archivo(
                                temp_file,
                                directorio_defecto,
                                nombre_doctor,
                                fechas_turno
                            )
                        else:
                            st.error("No se encontr√≥ el archivo cargado en la sesi√≥n")
                            exito = False
                            resultado = "Error: archivo no disponible"
                        
                        if exito:
                            st.success("¬°Reportes generados correctamente!")
                            
                            # Guardar rutas para acceso posterior
                            st.session_state.archivos_generados = resultado['rutas_excel']
                            st.session_state.correo_generado = resultado['correo']
                            st.session_state.resultado_economico = resultado['resultado_economico']
                            
                            # Mostrar resumen
                            st.subheader("Resumen Econ√≥mico")
                            eco = resultado['resultado_economico']
                            
                            # Crear tabla resumen
                            resumen_data = [
                                ["Horas trabajadas", eco['horas_trabajadas'], f"${eco['honorarios_hora']:,}"],
                                ["Ex√°menes RX", eco['rx_count'], f"${eco['rx_total']:,}"],
                                ["Ex√°menes TAC", eco['tac_count'], f"${eco['tac_total']:,}"],
                                ["TAC doble", eco['tac_doble_count'], f"${eco['tac_doble_total']:,}"],
                                ["TAC triple", eco['tac_triple_count'], f"${eco['tac_triple_total']:,}"],
                                ["**TOTAL**", "", f"**${eco['total']:,}**"]
                            ]
                            
                            # Mostrar como dataframe para mejor formato
                            df_resumen = pd.DataFrame(resumen_data, columns=["Concepto", "Cantidad", "Monto"])
                            st.dataframe(df_resumen, hide_index=True)
                            
                            # Mostrar botones para abrir archivos
                            st.subheader("Archivos Generados")
                            
                            for nombre, ruta in resultado['rutas_excel'].items():
                                nombre_archivo = os.path.basename(ruta)
                                # Generar enlace de descarga
                                with open(ruta, 'rb') as f:
                                    bytes_data = f.read()
                                    b64 = base64.b64encode(bytes_data).decode()
                                    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{nombre_archivo}">{nombre_archivo}</a>'
                                    st.markdown(href, unsafe_allow_html=True)
                            
                            # Mostrar contenido del correo
                            st.subheader("Contenido del Correo")
                            st.text_area("Asunto", resultado['correo']['asunto'], height=50)
                            st.text_area("Cuerpo", resultado['correo']['cuerpo'], height=300)
                        else:
                            st.error(f"Error al generar reportes: {resultado}")
            
            # Verificar si hay archivos generados previamente
            if 'archivos_generados' in st.session_state and 'correo_generado' in st.session_state:
                # Mostrar contenido del correo generado previamente
                with st.expander("Ver correo generado anteriormente"):
                    st.text("Asunto:")
                    st.code(st.session_state.correo_generado['asunto'])
                    st.text("Cuerpo:")
                    st.code(st.session_state.correo_generado['cuerpo'])
                
                # Mostrar resumen econ√≥mico anterior
                if 'resultado_economico' in st.session_state:
                    with st.expander("Ver resumen econ√≥mico anterior"):
                        eco = st.session_state.resultado_economico
                        
                        # Crear tabla resumen
                        resumen_data = [
                            ["Horas trabajadas", eco['horas_trabajadas'], f"${eco['honorarios_hora']:,}"],
                            ["Ex√°menes RX", eco['rx_count'], f"${eco['rx_total']:,}"],
                            ["Ex√°menes TAC", eco['tac_count'], f"${eco['tac_total']:,}"],
                            ["TAC doble", eco['tac_doble_count'], f"${eco['tac_doble_total']:,}"],
                            ["TAC triple", eco['tac_triple_count'], f"${eco['tac_triple_total']:,}"],
                            ["**TOTAL**", "", f"**${eco['total']:,}**"]
                        ]
                        
                        # Mostrar como dataframe para mejor formato
                        df_resumen = pd.DataFrame(resumen_data, columns=["Concepto", "Cantidad", "Monto"])
                        st.dataframe(df_resumen, hide_index=True)

        # Tab 4: Configuraci√≥n Avanzada (solo si el sistema de aprendizaje est√° disponible)
        # Redise√±o de pesta√±as principales - eliminar configuraci√≥n avanzada innecesaria y mejorar phi-2
        tab_idx = 3
        
        # Tab de Asistente simplificado (sin depender de phi-2)
        with tabs[tab_idx]:
            st.markdown("## ü§ñ Asistente B√°sico")
            st.markdown("### üí¨ Consultas simples sobre los datos cargados")
            
            # Inicializar historial
            if 'asistente_historial' not in st.session_state:
                st.session_state.asistente_historial = []
            
            # Ejemplos de preguntas
            with st.expander("üîç Preguntas que puede hacer", expanded=True):
                st.markdown("""
                - **Recuentos b√°sicos**: "¬øCu√°ntos TAC dobles hay en total?"
                - **Estad√≠sticas**: "¬øCu√°ntos RX hay?"
                - **Informaci√≥n**: "¬øCu√°ntos d√≠as de turno tengo?"
                """)
            
            # Entrada de usuario
            pregunta = st.text_input("Escriba su consulta:", 
                                  placeholder="Ej: ¬øCu√°ntos TAC dobles hay en total?",
                                  key="asistente_input")
            
            # Inicializar variables de estado para el asistente
            if 'asistente_respuesta' not in st.session_state:
                st.session_state.asistente_respuesta = ""
                st.session_state.mostrar_respuesta = False
            
            # Contenedor para la respuesta (permanece visible entre recargas)
            respuesta_container = st.container()
            
            # Procesar la pregunta sin recargar la p√°gina
            if st.button("Enviar consulta", type="primary", use_container_width=True, key="btn_consulta"):
                # Asegurar que nos mantenemos en la pesta√±a de asistente despu√©s de la consulta
                st.session_state.active_tab = tab_idx
                
                if not pregunta:
                    with respuesta_container:
                        st.warning("‚ö†Ô∏è Por favor ingrese una consulta")
                else:
                    # Activar el flag para mostrar respuesta
                    st.session_state.mostrar_respuesta = True
                    
                    # Guardar la pregunta para mantenerla entre recargas
                    st.session_state.ultima_pregunta = pregunta
                    
                    with st.spinner("Analizando datos..."):
                        # Verificar si hay datos cargados
                        if (hasattr(st.session_state, 'calculadora') and 
                            hasattr(st.session_state.calculadora, 'data_filtrada') and 
                            st.session_state.calculadora.data_filtrada is not None):
                            
                            # Acceder a los datos
                            df = st.session_state.calculadora.data_filtrada
                            
                            # Calcular estad√≠sticas b√°sicas
                            total_examenes = len(df)
                            total_rx = len(df[df['Tipo'] == 'RX']) if 'Tipo' in df.columns else 0
                            total_tac = len(df[df['Tipo'] == 'TAC']) if 'Tipo' in df.columns else 0
                            tac_dobles = sum(df['TAC doble']) if 'TAC doble' in df.columns else 0
                            tac_triples = sum(df['TAC triple']) if 'TAC triple' in df.columns else 0
                            dias_turno = len(st.session_state.dias_turno) if hasattr(st.session_state, 'dias_turno') else 0
                            
                            # Generar respuesta simple
                            respuesta = "No entend√≠ tu consulta. Intenta preguntar por TAC dobles, RX o d√≠as de turno."
                            pregunta_lower = pregunta.lower()
                            
                            # Respuestas predefinidas (m√°s variantes para mejor detecci√≥n)
                            if any(palabra in pregunta_lower for palabra in ["cuant", "total", "hay", "cu√°nt", "cantidad"]):
                                if "tac doble" in pregunta_lower:
                                    respuesta = f"Hay un total de {tac_dobles} TAC dobles en los datos."
                                elif "tac triple" in pregunta_lower:
                                    respuesta = f"Hay un total de {tac_triples} TAC triples en los datos."
                                elif "rx" in pregunta_lower:
                                    respuesta = f"Hay un total de {total_rx} ex√°menes RX en los datos."
                                elif "tac" in pregunta_lower:
                                    respuesta = f"Hay un total de {total_tac} ex√°menes TAC en los datos."
                                elif "examen" in pregunta_lower:
                                    respuesta = f"Hay un total de {total_examenes} ex√°menes en los datos."
                                elif any(palabra in pregunta_lower for palabra in ["turno", "d√≠a", "dias", "fecha"]):
                                    respuesta = f"Hay {dias_turno} d√≠as de turno seleccionados actualmente."
                            
                            # Guardar respuesta en la sesi√≥n
                            st.session_state.asistente_respuesta = respuesta
                            
                            # Guardar en historial
                            st.session_state.asistente_historial.append({
                                "pregunta": pregunta,
                                "respuesta": respuesta
                            })
                            
                            # Mostrar la respuesta en el contenedor
                            with respuesta_container:
                                st.success("‚úÖ Consulta procesada")
                                st.info(respuesta)
                            
                        else:
                            # Mostrar error en el contenedor
                            with respuesta_container:
                                st.error("No hay datos cargados para analizar")
                                st.info("Primero debe cargar un archivo CSV con datos de ex√°menes")
            
            # Mostrar la respuesta anterior si existe (para mantenerla entre recargas)
            if st.session_state.get('mostrar_respuesta', False) and st.session_state.get('asistente_respuesta', ''):
                with respuesta_container:
                    st.success("‚úÖ Consulta procesada")
                    st.info(st.session_state.asistente_respuesta)
                    
            # Mostrar historial de consultas si existe
            if st.session_state.asistente_historial:
                with st.expander("üìú Historial de consultas", expanded=False):
                    for i, item in enumerate(reversed(st.session_state.asistente_historial[-5:])):
                        st.markdown(f"**Pregunta:** {item['pregunta']}")
                        st.markdown(f"**Respuesta:** {item['respuesta']}")
                        st.markdown("---")
            
            # Informaci√≥n sobre el asistente
            with st.expander("‚ÑπÔ∏è Acerca del Asistente", expanded=False):
                st.markdown("""
                ### Asistente B√°sico de Radiolog√≠a
                
                Este asistente simple permite consultas r√°pidas sobre los datos cargados:
                
                - **Recuentos r√°pidos**: Ex√°menes por tipo, TAC dobles/triples
                - **Informaci√≥n general**: D√≠as de turno seleccionados
                - **Estad√≠sticas b√°sicas**: Totales de diferentes tipos de examen
                
                Usa palabras como "cu√°ntos", "hay" o "total" seguidas de lo que buscas.
                """)

# Ejecutar la aplicaci√≥n
if __name__ == "__main__":
    main()
